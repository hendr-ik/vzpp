%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 14.0.0
%%For: (Admin) ()
%%Title: (Chocolate_chip_cookies_set.eps)
%%CreationDate: 7/2/2012 3:22 PM
%%Canvassize: 16383
%%BoundingBox: 31 26 969 974
%%HiResBoundingBox: 31.5869 26.9063 968.4131 973.0942
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 2 0 () 
%AI3_TemplateBox: 500.5 499.5 500.5 499.5
%AI3_TileBox: 219.4399 91.2197 780.5596 908.8999
%AI3_DocumentPreview: Header
%AI5_ArtSize: 1000 1000
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -1057 1485 0.5 1805 929 18 0 0 70 112 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (Unnamed gradient 23)
(Unnamed gradient 23) 0 2 Bd
[
<
0000010102020203030404050505060607070708080909090A0A0B0B0C0C0C0D0D0E0E0E0F0F1010
101111
>
<
E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFC
FDFDFE
>
<
D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9
FAFBFC
>
<
000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1E1F20212223242526
272829
>
1 %_Br
[
0.067933 0.994903 0.989685 0.16 1 50 100 %_BS
%_0.067933 0.994903 0.989685 0.16 1 50 100 Bs
0.000031 0.915373 0.822385 0.000031 1 50 0.819672 %_BS
%_0.000031 0.915373 0.822385 0.000031 1 50 0.819672 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Black and White Linear)
(Black and White Linear) 0 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 0 1 1 50 100 %_BS
%_0 0 0 1 1 50 100 Bs
0 0 0 0 1 50 0 %_BS
%_0 0 0 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Black and White Radial)
(Black and White Radial) 1 2 Bd
[
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
0 %_Br
[
0 0 0 0 1 50 0 %_BS
%_0 0 0 0 1 50 0 Bs
0 0 0 1 1 51.0204 100 %_BS
%_0 0 0 1 1 51.0204 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Fade To Edge)
(Fade To Edge) 0 3 Bd
[
0
0 %_Br
0
0 %_Br
[
0 0 0 1 1 50 100 %_BS
%_0 0 0 1 1 50 100 Bs
0 0 0 1 1 50 50 %_BS
%_0 0 0 1 1 50 50 Bs
0 0 0 1 1 50 0 %_BS
%_0 0 0 1 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Super Soft Black Vignette)
(Super Soft Black Vignette) 1 3 Bd
[
0
0 %_Br
0
0 %_Br
[
0 0 0 1 1 56.0729 57.4443 %_BS
%_0 0 0 1 1 56.0729 57.4443 Bs
0 0 0 1 1 31.8603 79.7713 %_BS
%_0 0 0 1 1 31.8603 79.7713 Bs
0 0 0 1 1 50 100 %_BS
%_0 0 0 1 1 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Crosses Pattern)
(Crosses Pattern) 8.3721 8.3701 63.3369 63.3369 [
%AI3_Tile
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
8.3721 8.3711 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.118257 0.532982 0.833371 0.007263 k
 0.118257 0.532982 0.833371 0.007263 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
24.8623 2.875 m
24.8623 13.8672 L
13.8682 13.8672 L
13.8682 24.8604 L
2.875 24.8604 L
2.875 2.875 L
24.8623 2.875 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
30.3574 19.3643 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.547405 0.061786 0.82 0.001527 k
 0.547405 0.061786 0.82 0.001527 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
35.8535 24.8604 m
46.8486 24.8604 L
46.8486 13.8672 L
35.8535 13.8672 L
35.8535 2.875 L
24.8623 2.875 L
24.8623 13.8672 L
13.8682 13.8672 L
13.8682 24.8604 L
24.8623 24.8604 L
24.8623 35.8535 L
35.8535 35.8535 L
35.8535 24.8604 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
19.3643 41.3496 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.118257 0.532982 0.833371 0.007263 k
 0.118257 0.532982 0.833371 0.007263 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
24.8623 46.8477 m
35.8535 46.8477 L
35.8535 35.8535 L
24.8623 35.8535 L
24.8623 24.8604 L
13.8682 24.8604 L
13.8682 35.8535 L
2.875 35.8535 L
2.875 46.8477 L
13.8682 46.8477 L
13.8682 57.8398 L
24.8623 57.8398 L
24.8623 46.8477 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
8.3721 63.3369 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.1116 0.6324 0.7254 0.0093 k
 0.1116 0.6324 0.7254 0.0093 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
2.875 68.834 m
24.8613 68.834 L
24.8613 57.8398 L
13.8672 57.8398 L
13.8672 46.8477 L
2.875 46.8477 L
2.875 68.834 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
52.3447 30.3574 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.667567 0.075349 1 0.001862 k
 0.667567 0.075349 1 0.001862 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
57.8408 35.8535 m
68.833 35.8535 L
68.833 24.8604 L
57.8408 24.8604 L
57.8408 13.8682 L
46.8486 13.8682 L
46.8486 24.8604 L
35.8535 24.8604 L
35.8535 35.8535 L
46.8486 35.8535 L
46.8486 46.8477 L
57.8408 46.8477 L
57.8408 35.8535 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
63.3369 8.3711 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.254032 0.88394 0.581872 0.106752 k
 0.254032 0.88394 0.581872 0.106752 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
68.833 24.8604 m
57.8408 24.8604 L
57.8408 13.8682 L
46.8486 13.8682 L
46.8486 2.875 L
68.833 2.875 L
68.833 24.8604 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
41.3496 52.3428 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.12 0.68 0.78 0.01 k
 0.12 0.68 0.78 0.01 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
46.8486 57.8398 m
57.8408 57.8398 L
57.8408 46.8477 L
46.8486 46.8477 L
46.8486 35.8535 L
35.8535 35.8535 L
35.8535 46.8477 L
24.8613 46.8477 L
24.8613 57.8398 L
35.8535 57.8398 L
35.8535 68.834 L
46.8486 68.834 L
46.8486 57.8398 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0 0 1 k
 0 0 0 1 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
63.3369 63.3369 m
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.667567 0.075349 1 0.001862 k
 0.667567 0.075349 1 0.001862 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
68.833 46.8477 m
57.8408 46.8477 L
57.8408 57.8398 L
46.8486 57.8398 L
46.8486 68.834 L
68.833 68.834 L
68.833 46.8477 L
s
%AI6_EndPatternLayer
) &
(0 O 0 R 0.547405 0.061786 0.82 0.001527 k
 0.547405 0.061786 0.82 0.001527 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
2.875 35.8535 m
13.8682 35.8535 L
13.8682 24.8604 L
2.875 24.8604 L
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0876 0.4964 0.5694 0.0073 k
 0.0876 0.4964 0.5694 0.0073 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
35.8535 68.834 m
35.8535 57.8398 L
24.8613 57.8398 L
24.8613 68.834 L
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.529015 0.895109 0.075715 0.002747 k
 0.529015 0.895109 0.075715 0.002747 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
68.833 35.8535 m
57.8408 35.8535 L
57.8408 46.8477 L
68.833 46.8477 L
S
%AI6_EndPatternLayer
) &
(0 O 0 R 0.254032 0.88394 0.581872 0.106752 k
 0.254032 0.88394 0.581872 0.106752 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 5.75 w 4 M []0 d0 XR
35.8535 2.875 m
35.8535 13.8672 L
46.8486 13.8672 L
46.8486 2.875 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed 11)0 A
u
u
0 J 0 j 1 w 4 M []0 d0 XR
-3817.1992 4816.999 m
-3726.5903 4816.999 L
-3726.5903 4805.1182 L
-3817.1992 4805.1182 L
-3817.1992 4816.999 L
n
u
u
0 O
0 0 0 1 k
-3734.0437 4809.7305 m
-3734.3442 4809.7168 -3734.6472 4809.6992 -3734.9497 4809.6816 C
-3734.7976 4809.75 -3734.6472 4809.8564 -3734.4929 4810.0249 C
-3734.2952 4810.1353 -3734.1919 4809.9209 -3734.0437 4809.7305 C
f
/BBAccumRotation (0.598766) XT
-3735.7876 4809.6309 m
-3735.8423 4809.6274 -3735.8972 4809.623 -3735.9482 4809.6206 C
-3735.9968 4809.6484 -3736.0437 4809.6772 -3736.0857 4809.707 C
-3735.9868 4809.6772 -3735.8865 4809.6519 -3735.7876 4809.6309 C
f
/BBAccumRotation (0.598766) XT
-3737.3643 4809.8765 m
-3737.0857 4809.9302 -3736.8188 4809.8975 -3736.5613 4809.8369 C
-3736.7888 4809.7646 -3737.0532 4809.7622 -3737.3643 4809.8765 C
f
/BBAccumRotation (0.598766) XT
-3736.1079 4810.1104 m
-3736.2048 4809.9678 -3736.2524 4809.8184 -3736.0923 4809.71 c
-3736.0903 4809.709 -3736.0884 4809.709 -3736.0857 4809.707 C
-3736.2429 4809.7524 -3736.3987 4809.7998 -3736.5613 4809.8369 C
-3736.3911 4809.8926 -3736.2388 4809.9878 -3736.1079 4810.1104 C
f
/BBAccumRotation (0.598766) XT
-3736.1079 4810.1104 m
-3736.0144 4810.248 -3735.8655 4810.3774 -3735.8147 4810.457 c
-3735.8999 4810.3301 -3735.9983 4810.2129 -3736.1079 4810.1104 C
f
/BBAccumRotation (0.598766) XT
-3736.5056 4813.5024 m
-3736.6648 4813.6094 -3736.6272 4812.6494 -3736.9419 4812.8638 C
-3737.6799 4813.1333 -3738.3113 4813.5645 -3739.0024 4813.5664 C
-3739.3169 4813.7822 -3739.8132 4812.7168 -3740.1272 4812.9316 C
-3740.8677 4813.2017 -3742.7563 4814.4917 -3741.6433 4814.4336 c
-3739.9692 4814.291 -3738.8777 4814.0313 -3737.3755 4813.8545 C
-3736.1548 4813.4688 -3734.9812 4813.0103 -3733.7312 4812.6621 C
-3733.3811 4812.6167 -3733.0544 4812.6909 -3732.7251 4812.7559 C
-3733.1548 4812.6064 -3733.5945 4812.4595 -3734.0825 4812.3174 C
-3734.7251 4812.0527 -3735.5005 4813.2837 -3736.5056 4813.5024 C
f
/BBAccumRotation (0.598766) XT
-3727.3716 4810.3101 m
-3727.5281 4810.4185 -3727.8442 4810.6333 Y
-3728.5471 4809.9424 -3729.2856 4810.2129 -3730.0239 4810.4824 C
-3729.9165 4810.6416 -3729.8071 4810.8022 -3729.6963 4810.9614 C
-3729.2739 4810.9063 -3729.2251 4810.6382 -3729.6001 4810.4287 C
-3728.7407 4811.0117 -3727.9282 4811.1016 -3727.0959 4811.0039 C
-3727.1479 4810.7432 -3727.1372 4810.4429 -3727.3716 4810.3101 C
f
/BBAccumRotation (0.598766) XT
-3726.6079 4810.9248 m
-3726.7712 4810.9561 -3726.9353 4810.9829 -3727.0959 4811.0039 C
-3727.0923 4811.0313 -3727.0845 4811.0581 -3727.0784 4811.0869 C
-3726.9143 4811.0391 -3726.7505 4810.9917 -3726.5903 4810.9478 C
-3726.5959 4810.9399 -3726.6021 4810.9326 -3726.6079 4810.9248 C
f
/BBAccumRotation (0.598766) XT
-3740.7097 4810.7549 m
-3742.8071 4810.7935 -3744.7815 4810.7471 -3746.7097 4810.6533 C
-3746.8579 4810.8408 -3746.9617 4811.0576 -3747.1609 4810.9453 C
-3747.3113 4810.7783 -3747.4631 4810.6729 -3747.6135 4810.603 C
-3747.8953 4810.5879 -3748.1765 4810.5713 -3748.4556 4810.5527 C
-3748.5532 4810.5742 -3748.6521 4810.6006 -3748.7524 4810.6279 C
-3748.7537 4810.6294 -3748.7583 4810.6309 -3748.7605 4810.6328 c
-3748.9185 4810.7417 -3748.8716 4810.8896 -3748.7739 4811.0313 C
-3748.6648 4811.1328 -3748.5647 4811.2524 -3748.4792 4811.3789 c
-3748.5337 4811.2983 -3748.6785 4811.1694 -3748.7739 4811.0313 C
-3748.9067 4810.9097 -3749.0544 4810.8135 -3749.2273 4810.7593 C
-3749.4839 4810.8188 -3749.7524 4810.8535 -3750.0295 4810.7974 C
-3749.7212 4810.6846 -3749.4556 4810.6846 -3749.2273 4810.7593 C
-3749.0647 4810.7207 -3748.9087 4810.6729 -3748.7524 4810.6279 C
-3748.7075 4810.5977 -3748.6624 4810.5713 -3748.6155 4810.541 C
-3749.2583 4810.5 -3749.8972 4810.4526 -3750.5369 4810.4038 C
-3750.6841 4810.4287 -3750.8247 4810.4502 -3750.9392 4810.4824 c
-3751.4028 4810.6108 -3751.8647 4810.7393 -3752.1509 4810.2734 C
-3752.2639 4810.2656 -3752.3792 4810.2559 -3752.4944 4810.2437 C
-3752.4731 4810.2734 -3752.4497 4810.2969 -3752.4282 4810.3301 C
-3752.4792 4810.3008 -3752.5222 4810.2695 -3752.5571 4810.2393 C
-3753.0396 4810.1997 -3753.5239 4810.1582 -3754.0105 4810.1157 C
-3754.3247 4810.2969 -3754.6487 4810.5239 -3754.9731 4810.6606 C
-3755.1919 4810.3413 -3755.2993 4810.1816 V
-3755.4312 4810.4214 -3755.6196 4810.5801 -3755.8403 4810.6606 C
-3755.5784 4810.9478 -3755.3403 4811.2646 -3755.1177 4811.4614 C
-3754.7915 4811.9414 -3754.3892 4810.498 -3754.0044 4811.4033 c
-3754.3892 4810.498 -3754.7915 4811.9414 -3755.1177 4811.4614 C
-3755.3403 4811.2646 -3755.5784 4810.9478 -3755.8403 4810.6606 C
-3756.2993 4810.832 -3756.8933 4810.6606 -3757.3716 4810.1929 C
-3756.7776 4809.7871 -3756.2776 4810.1797 -3755.8403 4810.6606 C
-3755.6196 4810.5801 -3755.4312 4810.4214 -3755.2993 4810.1816 C
-3755.1919 4810.3413 -3754.9731 4810.6606 Y
-3754.6487 4810.5239 -3754.3247 4810.2969 -3754.0105 4810.1157 C
-3754.9597 4810.0327 -3755.9185 4809.9502 -3756.8987 4809.8687 c
-3763.2031 4809.2568 -3769.0176 4809.3657 -3775.5583 4808.9141 c
-3779.1016 4808.6367 -3782.5056 4808.2256 -3785.8442 4807.6631 c
-3792.5022 4806.5439 -3798.5759 4807.8301 -3805.3025 4805.4077 c
-3807.8843 4804.5581 -3812.6763 4805.0181 -3815.1653 4805.1182 C
-3818.5 4806.7119 -3816.7712 4810.832 -3816.6145 4811.0645 C
-3814.5647 4814.5757 -3812.9607 4812.6265 -3808.7839 4814.6895 C
-3811.6289 4813.5176 -3806.6848 4812.4297 -3803.9983 4814.8354 c
-3800.1111 4818.5 -3794.5671 4815.5688 -3789.7712 4816.5063 c
-3788.5723 4816.7417 -3787.2983 4816.5757 -3785.8647 4816.6484 C
-3778.4336 4817.895 -3771.5295 4816.3433 -3763.7161 4816.6274 C
-3761.6453 4816.6167 -3759.8264 4815.7271 -3758.0825 4815.2393 C
-3756.8091 4815.0742 -3755.4482 4815.5454 -3754.4128 4815.5439 c
-3752.7849 4815.5356 -3751.3833 4815.1992 -3750.0415 4814.7769 C
-3751.5415 4814.9526 -3752.6372 4815.2104 -3754.3091 4815.3555 c
-3755.4243 4815.4141 -3753.5337 4814.124 -3752.7952 4813.853 C
-3752.4792 4813.6382 -3751.9829 4814.7041 -3751.6665 4814.4878 C
-3750.9792 4814.4863 -3750.3479 4814.0557 -3749.6101 4813.7847 C
-3749.2937 4813.5703 -3749.3303 4814.5313 -3749.1724 4814.4248 C
-3748.1665 4814.207 -3747.3911 4812.9751 -3746.7483 4813.2383 C
-3746.2605 4813.3809 -3745.8201 4813.5293 -3745.3911 4813.6768 C
-3745.1196 4813.7295 -3744.8501 4813.7725 -3744.5632 4813.7349 C
-3744.3853 4813.6543 -3744.2007 4813.5742 -3744.0161 4813.4937 C
-3744.1624 4813.1997 -3744.2151 4812.8408 -3744.2639 4812.479 C
-3743.9983 4812.5313 -3743.6235 4812.7437 -3743.3579 4812.7969 c
-3743.6235 4812.7437 -3743.9983 4812.5313 -3744.2639 4812.479 C
-3744.2151 4812.8408 -3744.1624 4813.1997 -3744.0161 4813.4937 C
-3742.6919 4812.9302 -3741.1648 4812.4229 -3739.7449 4812.0093 C
-3739.7505 4811.9824 -3739.7583 4811.9526 -3739.7639 4811.9238 C
-3740.5945 4812.0215 -3741.4041 4811.9336 -3742.2661 4811.3496 C
-3741.8933 4811.5615 -3741.9392 4811.8281 -3742.3643 4811.8848 C
-3742.4731 4811.7256 -3742.5825 4811.5645 -3742.6899 4811.4053 C
-3741.9497 4811.1353 -3741.2112 4810.8638 -3740.5105 4811.5557 C
-3740.1936 4811.3408 -3740.0369 4811.2329 V
-3739.8025 4811.3657 -3739.8132 4811.667 -3739.7639 4811.9238 C
-3739.6021 4811.9063 -3739.4382 4811.8789 -3739.2739 4811.8477 C
-3739.6196 4811.3701 -3740.7097 4810.7549 Y
f
/BBAccumRotation (0.598766) XT
-3749.2463 4810.7314 m
-3749.1333 4810.6997 -3748.9944 4810.6782 -3748.8464 4810.6543 C
-3749.3833 4810.6118 -3749.9204 4810.5688 -3750.4597 4810.5239 C
-3750.1743 4810.9902 -3749.7112 4810.8608 -3749.2463 4810.7314 c
f
/BBAccumRotation (0.598766) XT
U
U
U
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed 20)0 A
u
u
0 J 0 j 1 w 4 M []0 d0 XR
-3818.5 4818.4351 m
-3604.8999 4818.4351 L
-3604.8999 4810.6343 L
-3818.5 4810.6343 L
-3818.5 4818.4351 L
n
0 O
0 0 0 1 k
-3818.5 4814.5352 m
-3808.4856 4817.0269 -3801.6863 4818.375 -3789.7007 4818.4351 c
-3776.7185 4818.5 -3711.6997 4818.4351 y
-3646.6816 4818.5 -3633.6997 4818.4351 v
-3621.7124 4818.375 -3614.9136 4817.0269 -3604.8999 4814.5352 C
-3614.9136 4812.0435 -3621.7124 4810.6953 -3633.6997 4810.6343 c
-3646.6816 4810.5688 -3711.6997 4810.6343 y
-3776.7185 4810.5688 -3789.7007 4810.6343 v
-3801.6863 4810.6953 -3808.4856 4812.0435 -3818.5 4814.5352 C
f
U
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 10 pt. Oval/ Adobe ArtOnPath B) -
(rush Tool/ Tapered Stroke/ Adobe ArtOnPath Brush Tool/ Calligr) -
(aphy/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(10 pt. Oval)
(1 10 10 75 75 -20 110 1 0 1 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Calligraphy)
(1 / Unnamed 11/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Tapered Stroke)
(1 / Unnamed 20/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 k
(White)
Pc
0 0 0 1 k
(Black)
Pc
0 1 1 0 k
(CMYK Red)
Pc
0 0 1 0 k
(CMYK Yellow)
Pc
1 0 1 0 k
(CMYK Green)
Pc
1 0 0 0 k
(CMYK Cyan)
Pc
1 1 0 0 k
(CMYK Blue)
Pc
0 1 0 0 k
(CMYK Magenta)
Pc
0.15 1 0.9 0.1 k
(C=15 M=100 Y=90 K=10)
Pc
0 0.9 0.85 0 k
(C=0 M=90 Y=85 K=0)
Pc
0 0.8 0.95 0 k
(C=0 M=80 Y=95 K=0)
Pc
0 0.5 1 0 k
(C=0 M=50 Y=100 K=0)
Pc
0 0.35 0.85 0 k
(C=0 M=35 Y=85 K=0)
Pc
0.05 0 0.9 0 k
(C=5 M=0 Y=90 K=0)
Pc
0.2 0 1 0 k
(C=20 M=0 Y=100 K=0)
Pc
0.5 0 1 0 k
(C=50 M=0 Y=100 K=0)
Pc
0.75 0 1 0 k
(C=75 M=0 Y=100 K=0)
Pc
0.85 0.1 1 0.1 k
(C=85 M=10 Y=100 K=10)
Pc
0.9 0.3 0.95 0.3 k
(C=90 M=30 Y=95 K=30)
Pc
0.75 0 0.75 0 k
(C=75 M=0 Y=75 K=0)
Pc
0.8 0.1 0.45 0 k
(C=80 M=10 Y=45 K=0)
Pc
0.7 0.15 0 0 k
(C=70 M=15 Y=0 K=0)
Pc
0.85 0.5 0 0 k
(C=85 M=50 Y=0 K=0)
Pc
1 0.95 0.05 0 k
(C=100 M=95 Y=5 K=0)
Pc
1 1 0.25 0.25 k
(C=100 M=100 Y=25 K=25)
Pc
0.75 1 0 0 k
(C=75 M=100 Y=0 K=0)
Pc
0.5 1 0 0 k
(C=50 M=100 Y=0 K=0)
Pc
0.35 1 0.35 0.1 k
(C=35 M=100 Y=35 K=10)
Pc
0.1 1 0.5 0 k
(C=10 M=100 Y=50 K=0)
Pc
0 0.95 0.2 0 k
(C=0 M=95 Y=20 K=0)
Pc
0.25 0.25 0.4 0 k
(C=25 M=25 Y=40 K=0)
Pc
0.4 0.45 0.5 0.05 k
(C=40 M=45 Y=50 K=5)
Pc
0.5 0.5 0.6 0.25 k
(C=50 M=50 Y=60 K=25)
Pc
0.55 0.6 0.65 0.4 k
(C=55 M=60 Y=65 K=40)
Pc
0.25 0.4 0.65 0 k
(C=25 M=40 Y=65 K=0)
Pc
0.3 0.5 0.75 0.1 k
(C=30 M=50 Y=75 K=10)
Pc
0.35 0.6 0.8 0.25 k
(C=35 M=60 Y=80 K=25)
Pc
0.4 0.65 0.9 0.35 k
(C=40 M=65 Y=90 K=35)
Pc
0.4 0.7 1 0.5 k
(C=40 M=70 Y=100 K=50)
Pc
0.5 0.7 0.8 0.7 k
(C=50 M=70 Y=80 K=70)
Pc
Bb
0 0 0 0 Bh
2 (Super Soft Black Vignette) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Super Soft Black Vignette)
Pc
Bb
2 (Fade To Edge) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Fade To Edge)
Pc
Bb
0 0 0 0 Bh
2 (Black and White Radial) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Black and White Radial)
Pc
Bb
2 (Black and White Linear) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Black and White Linear)
Pc
(Crosses Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Crosses Pattern)
Pc
0 0 0 1 k
(C=0 M=0 Y=0 K=100)
Pc
0 0 0 0.899994 k
(C=0 M=0 Y=0 K=90)
Pc
0 0 0 0.799988 k
(C=0 M=0 Y=0 K=80)
Pc
0 0 0 0.699997 k
(C=0 M=0 Y=0 K=70)
Pc
0 0 0 0.599991 k
(C=0 M=0 Y=0 K=60)
Pc
0 0 0 0.5 k
(C=0 M=0 Y=0 K=50)
Pc
0 0 0 0.399994 k
(C=0 M=0 Y=0 K=40)
Pc
0 0 0 0.299988 k
(C=0 M=0 Y=0 K=30)
Pc
0 0 0 0.199997 k
(C=0 M=0 Y=0 K=20)
Pc
0 0 0 0.099991 k
(C=0 M=0 Y=0 K=10)
Pc
0 0 0 0.049988 k
(C=0 M=0 Y=0 K=5)
Pc
0.1 0.7 0.8 0 k
(C=10 M=70 Y=80 K=0)
Pc
0.1 0.5 0.8 0 k
(C=10 M=50 Y=80 K=0)
Pc
0.65 0.1 1 0 k
(C=65 M=10 Y=100 K=0)
Pc
0.5 0.9 0.1 0 k
(C=50 M=90 Y=10 K=0)
Pc
0.25 0.85 0.6 0.1 k
(C=25 M=85 Y=60 K=10)
Pc
PB
%AI5_EndPalette
%%EndSetup
%BeginPhotoshop: 176
% 3842494D04040000000000A31C0228000A4C697A656E7A667265691C02370008
% 32303139303632361C025000086B6F72696E6F78651C025500086B6F72696E6F
% 78651C0269001650616E746865724D65646961204235313031323234331C026E
% 001750616E746865724D65646961202F206B6F72696E6F78651C027400175061
% 6E746865724D65646961202F206B6F72696E6F78651C0278000E6C65636B6572
% 20636F6F6B6965731C02000002000400
%EndPhotoshop
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(set) Ln
0 A
u
1 Ap
0 O
0.36817 0.755611 1 0.450599 k
0 J 0 j 1 w 4 M []0 d0 XR
298.0469 837.3564 m
298.5635 845.562 299.4058 853.6533 298.2119 862.0127 c
296.8975 871.2178 292.4487 879.3096 290.8447 888.2988 c
288.374 902.1396 275.4995 909.937 266.7505 919.708 c
254.8867 932.9556 245.9346 945.6733 229.0132 952.7959 c
217.7217 957.5498 206.6528 964.4741 194.7031 967.2656 c
166.6294 973.8223 139.9043 967.73 113.6533 957.5752 c
105.1992 954.3047 95.5605 952.0488 88.2739 946.7866 c
77.2349 938.8154 70.4014 924.1338 60.7754 914.4907 c
47.9155 901.6094 41.0508 893.0913 39.4951 873.8657 c
38.7373 864.5024 41.3716 857.3926 37.5859 848.5474 c
30.9336 833.001 31.9565 818.5117 37.0117 802.1357 c
38.9712 795.7915 41.7183 789.686 44.0269 783.4497 c
46.5679 776.5854 51.9849 773.0454 56.0068 767.4541 c
61.124 760.3413 63.6865 752.707 69.6001 745.9219 c
75.6968 738.9287 82.125 732.9907 90.041 728.0098 c
105.5767 718.2344 123.4009 712.1416 141.0635 707.5308 c
151.6924 704.7568 164.1445 707.4463 175.1138 706.9263 c
185.8828 706.415 192.8418 706.4902 202.7432 711.4126 c
213.127 716.5747 225.5405 716.5615 235.6689 722.8047 c
247.083 729.8394 253.5259 739.9033 262.8311 749.0967 c
268.2422 754.4424 276.9595 759.876 280.7148 766.4824 c
283.7886 771.8867 283.6157 779.5293 285.4492 785.6543 c
287.6792 793.1001 291.5142 798.5576 294.6787 805.3955 c
298.3721 813.3726 297.583 822.1509 297.7437 830.5537 c
297.7876 832.835 297.9043 835.0996 298.0469 837.3564 c
f
0.332555 0.661738 0.878141 0.255344 k
294.0498 841.8013 m
294.5615 849.9233 295.396 857.9336 294.2139 866.208 c
292.9131 875.3203 288.5093 883.3311 286.9209 892.23 c
284.4756 905.9312 271.7314 913.6494 263.0698 923.3213 c
251.3257 936.4346 242.4634 949.0239 225.7129 956.0762 c
214.5361 960.7808 203.5791 967.6362 191.7495 970.3989 c
163.9595 976.8901 137.5039 970.8584 111.5181 960.8057 c
103.1489 957.5688 93.6084 955.3359 86.395 950.127 c
75.4673 942.2354 68.7036 927.7021 59.1743 918.1572 c
46.4443 905.4053 39.6489 896.9727 38.1089 877.9414 c
37.3584 868.6719 39.9653 861.6348 36.2188 852.8789 c
29.6333 837.4897 30.646 823.146 35.6509 806.936 c
37.5898 800.6548 40.3091 794.6118 42.5942 788.4385 c
46.3511 778.2891 55.5688 774.2705 60.2056 763.6362 c
71.0488 738.7686 100.4604 723.5625 126.8677 722.668 c
140.3462 722.2119 148.7563 719.8169 161.0981 715.1709 c
183.4116 706.7715 194.8452 723.3735 214.0762 730.061 c
222.625 733.0317 232.1006 731.4961 240.2764 735.9199 c
247.9902 740.0942 252.999 748.3159 259.1904 754.4321 c
264.5479 759.7246 273.1763 765.1025 276.894 771.6421 c
279.9355 776.9922 279.7651 784.5571 281.5801 790.6211 c
283.7881 797.9912 287.583 803.3945 290.7168 810.1621 c
294.3726 818.0596 293.5913 826.7485 293.7505 835.0664 c
293.7935 837.3252 293.9097 839.5674 294.0498 841.8013 c
f
0 Ap
0.259678 0.614282 0.880491 0.112215 k
83.7896 939.8384 m
93.9316 949.2393 105.1099 956.8647 115.5259 959.5181 c
126.728 962.3721 137.2271 963.4214 148.6719 963.7822 c
157.1162 964.0483 165.1826 966.3154 173.5493 967.0015 c
189.7261 968.3296 205.9912 959.4082 219.7041 951.7427 c
230.8135 945.5313 236.4287 937.6519 243.8794 927.748 c
253.459 915.0151 270.1729 910.062 279.5078 897.7378 c
292.3867 880.7329 278.9946 863.3384 285.7324 845.1719 c
292.9399 825.7407 285.0361 819.7612 274.8481 804.2217 c
261.6362 784.0728 246.064 758.4854 222.1167 749.707 c
206.8721 744.1187 192.6626 744.0337 178.0898 736.0322 c
166.7813 729.8242 154.5264 724.3711 141.7456 728.1436 c
129.8301 731.6597 122.7383 741.0498 112.084 746.6631 c
102.0894 751.9287 89.9517 748.8228 79.9966 753.9385 c
71.5864 758.2593 65.7095 767.3345 61.2603 775.3042 c
57.0601 782.832 52.1113 789.0913 47.0474 796.001 c
36.0063 811.064 33.104 827.6846 41.9697 844.6694 c
45.4629 851.3613 50.2056 855.6792 49.9292 863.728 c
49.6973 870.5107 42.7026 876.1177 42.624 882.5356 c
42.4268 898.6025 72.6523 929.5117 83.7896 939.8384 c
f
0.222843 0.581903 0.805203 0.06424 k
114.9678 954.3213 m
122.4893 956.7021 129.0864 953.4893 136.5 952.9478 c
153.373 951.7148 169.6479 960.6357 186.7192 959.3975 c
203.9971 958.145 216.3037 947.9316 226.0972 934.1914 c
246.6191 905.4023 285.7568 899.0703 278.9863 855.2939 c
277.4863 845.5986 279.1226 830.6812 272.915 822.5938 c
264.2183 811.2603 244.3745 812.6963 232.1929 807.5474 c
217.8662 801.4897 214.6816 790.4497 203.8608 781.2817 c
193.998 772.9243 180.709 773.7422 168.7896 770.1768 c
154.4004 765.873 141.2217 755.5552 125.7324 755.8003 c
114.3213 755.981 99.0518 762.6147 89.9785 769.4282 c
79.8018 777.0693 80.2109 785.4512 73.1211 796.0879 c
67.5205 804.4902 58.939 804.5303 52.4863 810.9468 c
40.6787 822.688 48.1611 833.1909 51.5728 846.4185 c
55.3599 861.1079 50.085 872.0879 50.5039 886.6484 c
50.9136 900.8916 71.1055 913.3818 83.585 917.0537 c
107.667 924.1382 95.229 948.0737 114.9678 954.3213 c
f
0.176303 0.543633 0.764004 0.022583 k
220.2622 817.7324 m
236.9473 817.2881 236.3164 831.9941 246.7896 840.3213 c
259.8506 850.7041 272.6602 862.9121 263.7563 880.9282 c
258.6475 891.2651 249.2671 898.7896 241.8442 907.3638 c
235.0059 915.2637 230.5181 924.2974 224.8872 933.0029 c
210.5786 955.1221 191.1128 959.0181 166.8867 952.3896 c
156.9829 949.6802 148.0332 948.2095 137.7754 949.6533 c
131.1255 950.5903 122.1064 954.2856 116.1675 949.5674 c
109.9858 944.6548 109.1226 932.5366 105.4849 925.8369 c
101.0278 917.626 93.8564 911.2827 86.0923 906.2681 c
79.8579 902.2407 69.459 901.498 67.4434 893.0269 c
66.5508 889.2788 69.7554 887.2417 69.8179 884.0542 c
69.8833 880.6904 67.8301 877.0977 66.9028 873.8857 c
64.6265 866.0024 62.855 857.4238 66.1162 849.5337 c
68.9277 842.7295 71.8105 839.4502 72.4473 831.748 c
73.6831 816.7861 77.2246 803.4961 89.501 793.5405 c
104.6841 781.228 125.5688 780.8394 141.2095 792.4443 c
152.8916 801.1133 159.7466 818.5283 174.4102 822.6602 c
189.3818 826.8784 205.2788 818.1304 220.2622 817.7324 c
f
0.222843 0.581903 0.805203 0.06424 k
244.8452 857.6104 m
246.8945 859.1587 247.7769 861.5142 246.7031 865.0547 c
246.2617 866.5078 244.2637 868.2407 243.6499 870.0449 c
242.7163 872.7837 244.2715 876.4165 242.6318 879.0313 c
230.3423 898.6172 188.917 856.0625 218.4395 855.3071 c
225.3662 855.1299 239.3296 853.4419 244.8452 857.6104 c
f
0.259678 0.614282 0.880491 0.112215 k
188.7041 810.0996 m
184.1289 801.3145 190.0928 785.8193 202.3052 791.3101 c
217.4653 798.1235 194.0288 820.2764 188.7041 810.0996 c
f
0.222843 0.581903 0.805203 0.06424 k
120.0547 945.3306 m
121.0522 946.0576 122.0811 946.5703 123.1113 946.8086 c
132.2988 948.9346 141.5884 938.6636 138.1162 930.2456 c
136.272 925.7734 121.1357 916.0186 115.9282 917.9541 c
106.543 921.4404 112.3706 939.7339 120.0547 945.3306 c
f
78.3145 851.9668 m
74.1172 848.6138 77.335 842.0474 82.5483 843.6611 c
88.6006 845.5342 85.2051 857.4521 78.3145 851.9668 c
f
145.5151 908.2012 m
143.019 906.2075 144.9331 902.3027 148.0332 903.2627 c
151.6313 904.376 149.6123 911.4634 145.5151 908.2012 c
f
231.2065 841.707 m
228.7095 839.7134 230.6235 835.8081 233.7241 836.7681 c
237.3223 837.8823 235.3032 844.9692 231.2065 841.707 c
f
143.7222 946.2412 m
141.2256 944.2466 143.1396 940.3418 146.2407 941.3022 c
149.8384 942.416 147.8193 949.5024 143.7222 946.2412 c
f
130.8198 860.8184 m
128.3237 858.8242 130.2373 854.9194 133.3379 855.8794 c
136.936 856.9941 134.917 864.0801 130.8198 860.8184 c
f
0.259678 0.614282 0.880491 0.112215 k
176.4336 940.3872 m
172.4473 940.0464 171.4634 934.1606 175.2749 932.689 c
180.8501 930.5361 183.9653 941.0308 176.4336 940.3872 c
f
102.0298 819.3066 m
99.0386 819.0513 98.3003 814.6357 101.1602 813.5303 c
105.3438 811.915 107.6816 819.7896 102.0298 819.3066 c
f
186.6455 792.2505 m
183.6538 791.9951 182.915 787.5781 185.7749 786.4741 c
189.958 784.8584 192.2969 792.7334 186.6455 792.2505 c
f
240.6582 872.0313 m
236.6729 871.6909 235.6885 865.8057 239.4995 864.3335 c
245.0757 862.1807 248.1895 872.6753 240.6582 872.0313 c
f
0.332555 0.661738 0.878141 0.255344 k
260.7832 805.4609 m
256.5576 805.0659 254.5425 799.6724 258.8369 797.7915 c
264.8452 795.1611 269.4424 806.271 260.7832 805.4609 c
f
0.259678 0.614282 0.880491 0.112215 k
157.0542 773.2725 m
158.4092 776.2769 158.7065 779.7505 157.5449 782.9077 c
156.6328 785.3857 153.5664 789.8535 150.8618 790.6714 c
142.9229 793.0728 133.6548 791.3706 129.0854 783.8286 c
122.894 773.6079 141.3052 763.4175 149.4624 766.1733 c
152.8906 767.3306 155.5894 770.0269 157.0542 773.2725 c
f
0.332555 0.661738 0.878141 0.255344 k
152.3706 773.4941 m
153.0986 774.7559 153.6489 776.1401 154.0122 777.5215 c
154.5708 779.646 155.3472 784.3149 154.1499 786.3472 c
152.4756 789.1895 147.6089 789.6387 144.7188 789.708 c
140.4048 789.8115 135.5322 788.6514 132.8799 784.96 c
127.731 777.7891 136.4019 769.2119 143.4849 768.3496 c
147.5059 767.8594 150.5166 770.2778 152.3706 773.4941 c
f
0.259678 0.614282 0.880491 0.112215 k
142.7524 925.8501 m
144.5771 922.9517 142.3638 918.7822 141.9272 915.8672 c
141.5254 913.186 140.7871 910.7925 137.9146 909.9004 c
131.7012 907.9702 123.1968 911.374 120.2671 917.1997 c
118.0542 921.5991 121.2344 929.832 126.6226 930.2139 c
129.8545 930.4429 140.8652 928.8418 142.7524 925.8501 c
f
0.433814 0.796536 0.845457 0.663325 k
142.2354 932.3975 m
144.061 929.4995 141.8467 925.3301 141.4102 922.4146 c
141.0083 919.7339 140.2695 917.3394 137.3975 916.4478 c
131.1841 914.5181 122.6797 917.9209 119.749 923.7466 c
117.5366 928.1465 120.7173 936.3789 126.1055 936.7612 c
129.3369 936.9897 140.3477 935.3896 142.2354 932.3975 c
f
0.376135 0.694606 0.967925 0.390723 k
140.3579 933.1509 m
142.8262 929.2329 138.4688 922.1265 135.4443 919.668 c
130.9146 915.9844 127.4258 918.292 122.7329 920.4341 c
116.3281 923.3564 116.356 937.9712 124.3311 938.5361 c
127.5615 938.7642 138.4702 936.1431 140.3579 933.1509 c
f
0.332555 0.661738 0.878141 0.255344 k
189.8862 798.5542 m
188.5488 800.521 188.3584 803.1909 188.5474 805.4976 c
188.9751 810.7451 192.7285 820.311 199.1982 820.5991 c
203.6279 820.7974 205.9604 815.1094 207.1045 811.5776 c
208.7583 806.4736 209.2983 799.7695 203.7012 796.9033 c
200.6011 795.3154 193.9048 794.9336 191.0322 797.2939 c
190.5806 797.666 190.2017 798.0903 189.8862 798.5542 c
f
0.433814 0.796536 0.845457 0.663325 k
185.2109 801.5195 m
182.397 803.8101 187.021 809.7568 186.6973 813.1616 c
186.3755 816.5332 182.5249 820.3735 186.6162 822.5068 c
189.915 824.2251 194.5498 827.1582 201.062 823.0171 c
207.147 819.1475 204.1489 805.3003 200.4185 800.8154 c
196.7119 796.3589 189.7764 797.8032 185.2109 801.5195 c
f
0.376135 0.694606 0.967925 0.390723 k
182.5488 803.2944 m
179.7344 805.5845 184.3594 811.5313 184.0347 814.936 c
183.7139 818.3071 179.8628 822.1489 183.9546 824.2813 c
187.2529 825.9995 196.9673 826.293 200.0898 823.9346 c
205.8457 819.5903 201.4863 807.0747 197.7563 802.5898 c
194.0493 798.1333 187.1147 799.5781 182.5488 803.2944 c
f
0.259678 0.614282 0.880491 0.112215 k
235.2139 876.8701 m
236.2144 873.7129 234.3335 865.7656 231.9434 863.5664 c
228.2441 860.1606 212.626 861.1787 212.3052 863.0781 c
211.3193 868.9102 213.7603 876.6665 219.9619 879.6826 c
223.5063 881.4063 233.9341 880.9067 235.2139 876.8701 c
f
0.433814 0.796536 0.845457 0.663325 k
230.3984 882.0664 m
231.3989 878.9087 229.5171 870.9619 227.1279 868.7622 c
223.4292 865.3569 207.8105 866.375 207.4902 868.2744 c
206.5039 874.1064 208.9453 881.8623 215.146 884.8789 c
218.6904 886.6025 229.1187 886.103 230.3984 882.0664 c
f
0.533043 0.761166 0.73666 0.777951 k
230.3984 882.0664 m
231.3989 878.9087 229.5171 870.9619 227.1279 868.7622 c
223.4292 865.3569 214.2607 872.7617 213.1636 874.3447 c
211.4399 876.833 208.9453 881.8623 215.146 884.8789 c
218.6904 886.6025 229.1187 886.103 230.3984 882.0664 c
f
0.376135 0.694606 0.967925 0.390723 k
227.3374 882.8789 m
228.3374 879.7222 226.3105 871.9238 224.0669 869.5757 c
221.9771 867.3882 207.8105 866.375 207.4902 868.2744 c
206.5039 874.1064 206.1602 881.8267 212.3613 884.8428 c
215.9053 886.5664 226.0571 886.9165 227.3374 882.8789 c
f
0.222843 0.581903 0.805203 0.06424 k
120.0464 840.0825 m
114.4424 836.6899 105.4707 847.6655 104.1558 852.7822 C
108.9224 858.9478 116.7441 870.708 120.4272 869.5903 c
123.9722 868.5151 126.1768 862.459 127.833 859.4678 c
130.5459 854.5703 130.2861 850.5503 126.8638 846.2339 c
126.3301 845.561 122.9492 841.8438 120.0464 840.0825 c
f
0.259678 0.614282 0.880491 0.112215 k
117.9351 846.4546 m
116.8511 846.1685 115.7017 846.1533 114.5161 846.4971 c
108.3892 848.2686 105.1553 859.3306 110.7139 863.4624 c
115.7612 867.2134 125.0728 866.8228 125.9253 859.2661 c
126.4409 854.689 122.8647 847.7578 117.9351 846.4546 c
f
0.376135 0.694606 0.967925 0.390723 k
116.8081 849.2402 m
112.127 846.4063 104.6338 855.5732 103.5361 859.8481 C
107.5176 864.998 114.0508 874.8213 117.1274 873.8882 c
120.0879 872.9902 121.9297 867.9302 123.3125 865.4326 c
125.5796 861.3413 125.3623 857.9834 122.5039 854.3779 c
122.0581 853.8164 119.2334 850.7109 116.8081 849.2402 c
f
0.433814 0.796536 0.845457 0.663325 k
116.8081 849.2402 m
112.127 846.4063 107.8535 875.3394 117.1274 873.8882 c
120.1846 873.4092 121.9297 867.9302 123.3125 865.4326 c
125.5796 861.3413 125.3623 857.9834 122.5039 854.3779 c
122.0581 853.8164 119.2334 850.7109 116.8081 849.2402 c
f
0.332555 0.661738 0.878141 0.255344 k
115.3442 849.6245 m
114.2383 848.4033 103.5439 857.0044 103.5361 859.8481 c
103.5225 864.2515 111.5771 874.667 116.5474 873.7783 c
117.7539 873.5615 120.6987 867.835 121.5376 866.3213 c
125.9854 858.293 120.8584 855.7104 115.3442 849.6245 c
f
0.433814 0.796536 0.845457 0.663325 k
128.8423 780.6782 m
132.6567 788.5205 135.0332 796.4521 145.8589 792.606 c
153.8203 789.7783 156.0576 789.8511 151.5078 780.4404 c
149.6533 776.6025 147.4175 770.5435 142.3306 770.2109 c
136.7778 769.8486 133.2383 778.1963 128.8423 780.6782 C
f
0.376135 0.694606 0.967925 0.390723 k
126.7271 782.2813 m
130.5415 790.1235 131.6748 798.0107 142.501 794.1641 c
150.4624 791.3364 153.396 792.5132 148.8457 783.103 c
146.9912 779.2646 144.7549 773.2061 139.6689 772.8735 c
134.1162 772.5107 131.124 779.7998 126.7271 782.2813 C
f
0.332555 0.661738 0.878141 0.255344 k
214.6538 749.6572 m
211.123 748.8086 207.3975 749.7021 204.2231 751.3418 c
202.1431 752.4165 196.896 755.1255 197.271 758.0522 c
197.4302 759.3013 198.4331 760.5249 199.2202 761.4526 c
201.0488 763.6045 203.5063 764.5 206.1621 765.2603 c
207.5771 765.6646 209.0674 765.6025 210.4883 765.8389 c
213.106 766.2729 215.958 767.2886 217.6079 764.4619 c
218.6973 762.5947 220.541 760.8794 221.1655 758.8018 c
222.4438 754.5571 218.7188 750.7109 214.8613 749.7085 c
214.792 749.6909 214.7231 749.6729 214.6538 749.6572 c
f
0.433814 0.796536 0.845457 0.663325 k
212.2261 752.1626 m
205.5425 753.3809 191.5166 760.5073 y
193.9849 766.2324 195.5786 767.8477 202.0947 769.7095 c
203.625 770.147 216.519 772.022 216.9072 769.0776 c
217.5503 764.1973 214.6494 757.1021 212.2261 752.1626 C
f
0.533043 0.761166 0.73666 0.777951 k
212.2261 752.1626 m
209.3374 757.8545 208.2324 763.1235 y
210.7007 768.8491 216.519 772.022 216.9072 769.0776 c
217.5503 764.1973 214.6494 757.1021 212.2261 752.1626 C
f
0.376135 0.694606 0.967925 0.390723 k
211.0342 754.5488 m
209.6787 755.124 191.498 760.4653 191.5166 760.5073 c
193.9849 766.2324 194.6919 769.6221 201.2075 771.4844 c
202.7378 771.9219 217.7212 771.9326 216.9072 769.0776 c
215.5332 764.252 213.1968 758.9565 211.0342 754.5488 C
f
0.222843 0.581903 0.805203 0.06424 k
214.5264 912.6938 m
212.6221 912.3813 210.8833 912.5166 209.623 913.314 c
202.167 918.0313 211.6792 934.4663 219.2583 933.897 c
224.0488 933.5366 229.4805 924.6797 227.2954 920.4932 c
225.6943 917.4253 219.5371 913.5127 214.5264 912.6938 c
f
0.259678 0.614282 0.880491 0.112215 k
212.4004 915.8032 m
208.7524 915.3755 205.5381 916.6606 205.6611 921.3975 c
205.8105 927.1943 211.6914 931.8789 217.0757 932.3921 c
224.5254 933.1025 225.7344 924.8979 221.4004 920.0884 c
219.6177 918.1099 215.8184 916.2036 212.4004 915.8032 c
f
0.433814 0.796536 0.845457 0.663325 k
210.7554 916.415 m
197.3208 912.3452 205.1279 937.9346 215.562 937.1509 c
217.1196 937.0332 222.7065 932.3975 222.7065 929.5181 c
222.7065 928.021 212.1338 916.8325 210.7554 916.415 c
f
0.332555 0.661738 0.878141 0.255344 k
209.8682 918.1895 m
196.4336 914.1196 205.1279 937.9346 215.562 937.1509 c
217.1196 937.0332 221.7778 932.7578 221.8184 931.293 c
221.8604 929.7969 211.2466 918.6069 209.8682 918.1895 c
f
0.222843 0.581903 0.805203 0.06424 k
78.9463 813.6055 m
78.8486 813.5083 78.752 813.4185 78.6558 813.3364 c
72.627 808.1758 64.2534 814.8926 61.7969 820.3667 C
65.9365 823.873 76.9478 834.0415 82.2529 827.2568 c
84.5684 824.2974 81.6152 816.2715 78.9463 813.6055 c
f
0.259678 0.614282 0.880491 0.112215 k
76.5225 815.8491 m
74.5601 814.939 72.3374 814.6094 70.3618 815.1104 c
65.6465 816.3066 59.9702 821.8115 64.9058 826.3174 c
68.8608 829.9272 77.7817 832.1338 80.8921 826.668 c
83.5093 822.0674 80.5693 817.7251 76.5225 815.8491 c
f
0.433814 0.796536 0.845457 0.663325 k
77.3252 818.7935 m
77.522 819.3755 63.1992 821.9487 61.8364 822.4673 C
60.6758 825.0527 l
72.6211 835.1699 77.3223 832.9058 v
85.2534 829.0854 79.7822 826.0713 77.3252 818.7935 C
f
0.533043 0.761166 0.73666 0.777951 k
77.3252 818.7935 m
77.522 819.3755 70.5015 825.1187 69.1392 825.6367 C
72.6211 835.1699 77.3223 832.9058 v
85.2534 829.0854 79.7822 826.0713 77.3252 818.7935 C
f
0.376135 0.694606 0.967925 0.390723 k
74.6636 821.4556 m
74.8599 822.0376 62.0381 824.5342 60.6758 825.0527 C
59.0054 833.0967 68.0063 837.7197 74.5415 834.5718 c
82.4727 830.7515 77.1201 828.7339 74.6636 821.4556 C
f
0.259678 0.614282 0.880491 0.112215 k
264.0806 853.793 m
268.9063 850.6792 271.4824 836.0112 264.0122 834.3247 c
257.8877 832.9429 250.9565 839.1655 248.3687 843.9722 c
243.5957 852.8354 257.1206 858.2842 264.0806 853.793 c
f
0.433814 0.796536 0.845457 0.663325 k
262.8228 857.8652 m
269.0708 853.835 265.5493 844.6089 262.9751 839.437 C
256.4663 840.7476 250.2256 845.3174 245.1206 850.0479 C
248.7041 856.373 253.3892 863.9497 262.8228 857.8652 c
f
0.376135 0.694606 0.967925 0.390723 k
261.9351 859.6396 m
268.1826 855.6094 264.6621 846.3838 262.0879 841.2109 C
255.5791 842.522 251.3857 848.5356 245.1206 850.0479 C
248.7041 856.373 252.502 865.7246 261.9351 859.6396 c
f
0.176303 0.543633 0.764004 0.022583 k
86.021 934.0254 m
81.8525 933.8867 78.73 928.9463 83.5615 926.853 c
89.4072 924.3193 93.936 934.2866 86.021 934.0254 c
f
78.71 923.2227 m
76.7354 923.1567 75.2549 920.8149 77.5449 919.8232 c
80.3159 918.6226 82.4619 923.3457 78.71 923.2227 c
f
0.072755 0.38764 0.658961 0.000031 k
112.0801 796.7856 m
106.4702 796.6001 102.2695 789.9512 108.771 787.1338 c
116.6382 783.7251 122.7319 797.1377 112.0801 796.7856 c
f
U
u
1 Ap
0.36817 0.755611 1 0.450599 k
632.8438 837.3564 m
633.3604 845.562 634.2021 853.6533 633.0088 862.0127 c
631.8975 869.7954 628.4326 876.9194 626.4883 884.4834 c
624.749 891.2524 624.5898 897.5313 621.5508 904.0557 c
617.7227 912.2764 610.4346 916.6758 603.7646 922.4404 c
598.2998 927.1641 593.9629 933.0098 588.3955 937.6387 c
580.1504 944.4951 570.4443 948.7783 561.2188 953.9146 c
551.5234 959.3149 540.3301 964.7358 529.499 967.2656 c
501.4248 973.8223 474.7012 967.73 448.4487 957.5752 c
439.9951 954.3047 430.3569 952.0488 423.0703 946.7866 c
412.0313 938.8154 405.1982 924.1338 395.5713 914.4907 c
382.7109 901.6094 375.8467 893.0913 374.292 873.8657 c
373.5342 864.5024 376.167 857.3926 372.3818 848.5474 c
365.7305 833.001 366.7524 818.5117 371.8086 802.1357 c
373.7671 795.7915 376.5142 789.686 378.8232 783.4497 c
381.3638 776.5854 386.7808 773.0454 390.8032 767.4541 c
395.9219 760.3413 398.4834 752.707 404.3965 745.9224 c
414.5879 734.2275 426.957 724.5381 442.0044 720.1855 c
458.0107 715.5566 475.1484 715.9478 490.7109 709.5718 c
502.6953 704.6616 513.1396 701.4692 526.042 705.3208 c
540.5693 709.6577 556.124 715.9839 570.0605 721.9731 c
580.1836 726.3242 587.1064 734.438 594.1094 742.5996 c
600.6523 750.2246 610.6328 757.8984 615.5107 766.4824 c
618.585 771.8867 618.4121 779.5293 620.2461 785.6543 c
622.4756 793.1001 626.3096 798.5576 629.4766 805.3955 c
633.1689 813.3726 632.3799 822.1509 632.5391 830.5537 c
632.584 832.835 632.7021 835.0996 632.8438 837.3564 c
f
0.332555 0.661738 0.878141 0.255344 k
628.8467 841.8013 m
629.3584 849.9233 630.1924 857.9336 629.0098 866.208 c
627.709 875.3203 623.3057 883.3311 621.7178 892.2305 c
618.1982 911.9419 592.3975 926.9888 580.6426 942.2549 c
548.5693 983.915 470.6045 975.8457 428.2954 955.6357 c
415.4766 949.5137 411.2354 939.7656 402.8027 929.0811 c
394.957 919.1396 383.2104 912.354 376.6167 901.4775 c
367.6729 886.7236 370.5898 867.501 368.7314 851.0532 c
366.979 835.5464 365.6987 822.3203 370.4478 806.9346 c
372.3867 800.6538 375.1055 794.6108 377.3911 788.4385 c
381.1475 778.2891 390.3657 774.2705 395.0015 763.6362 c
405.8452 738.7686 435.2559 723.5625 461.6641 722.668 c
475.1421 722.2119 483.5527 719.8169 495.8945 715.1709 c
518.208 706.7715 529.6416 723.3735 548.873 730.061 c
557.4209 733.0317 566.8965 731.4961 575.0732 735.9199 c
582.7871 740.0942 587.7949 748.3159 593.9863 754.4321 c
599.3447 759.7246 607.9727 765.1025 611.6904 771.6421 c
614.7314 776.9922 614.5615 784.5571 616.376 790.6211 c
618.584 797.9912 622.3789 803.3945 625.5137 810.1621 c
629.1699 818.0596 628.3887 826.7485 628.5469 835.0664 c
628.5898 837.3252 628.707 839.5674 628.8467 841.8013 c
f
0 Ap
0.259678 0.614282 0.880491 0.112215 k
416.8018 941.6841 m
428.3735 952.9526 440.7759 960.2178 457.4224 960.9614 c
474.7021 961.7344 491.23 965.5972 508.3457 967.0015 c
524.5225 968.3296 540.7881 959.4082 554.5 951.7427 c
565.6094 945.5313 571.2256 937.6519 578.6768 927.7485 c
587.6943 915.7603 603.0674 911.25 612.4551 899.7891 c
622.4219 887.6172 625.3125 874.5327 621.0781 859.4995 c
617.7822 847.7998 620.7676 837.2954 620.9941 825.6143 c
621.1943 815.2764 618.1406 803.6797 613.6113 794.46 c
606.2988 779.5786 592.1563 772.3799 577.5225 766.2227 c
560.793 759.1836 545.5596 751.6699 531.0859 740.5928 c
520.4863 732.4839 509.4355 722.4209 495.0791 724.8232 c
482.5767 726.9126 472.5088 736.25 460.9932 740.9336 c
444.25 747.7441 421.292 739.959 408.5835 755.1704 c
402.6172 762.313 399.48 771.9146 395.0244 779.998 c
388.9077 791.0962 378.2422 801.2759 373.3101 812.6816 c
367.2139 826.7759 371.6045 842.3716 378.1885 855.2979 c
383.9873 866.6797 380.8799 873.6455 378.0503 885.3174 c
375.4272 896.1406 377.9702 902.0776 386.5386 908.7407 c
396.6958 916.6411 403.5298 924.73 411.0835 935.1094 c
412.7944 937.4595 414.7139 939.6494 416.8018 941.6841 c
f
0.222843 0.581903 0.805203 0.06424 k
449.8481 954.7788 m
456.1948 956.0527 462.9336 954.4468 471.2969 953.8354 c
488.1699 952.6021 504.4443 961.5229 521.5156 960.2852 c
540.6836 958.895 550.6348 946.5112 562.2666 933.1479 c
574.8838 918.6528 592.0078 909.0815 600.1748 890.8506 c
605.0137 880.0503 620.4824 857.4111 613.3174 845.8408 c
609.5332 839.7285 600.1729 838.2925 594.9961 833.4497 c
585.8066 824.855 582.5586 811.1797 576.999 800.2964 c
563.332 773.543 538.8545 771.2056 513.8643 759.8369 c
502.3643 754.6045 489.46 747.9824 476.5249 748.3311 c
465.0239 748.6401 456.2427 754.6484 446.0815 759.0352 c
424.3369 768.4229 407.0791 780.5566 395.415 801.957 c
388.8628 813.9795 378.3477 827.3833 378.8506 841.688 c
379.1016 848.792 382.5605 855.1714 384.0254 862.0229 c
385.9175 870.877 384.6392 879.6265 384.6343 888.5654 c
384.6211 912.165 401.7715 911.7388 417.4512 923.4277 c
425.9634 929.7739 430.2627 939.708 437.373 947.3052 c
441.5991 951.8193 445.6372 953.9331 449.8481 954.7788 c
f
0.176303 0.543633 0.764004 0.022583 k
577.4014 909.9165 m
573.4844 912.8125 569.3496 915.4023 565.1865 917.7305 c
558.8027 921.3027 552.0576 925.1709 547.6895 931.2197 c
543.9482 936.3994 542.5283 943.293 538.5078 948.2256 c
529.8369 958.8633 511.957 955.5044 500.5737 952.3896 c
480.5376 946.9082 454.7939 958.5029 445.3198 934.8247 c
441.2124 924.5596 436.772 921.271 426.876 916.7505 c
419.5825 913.4199 410.3755 908.9463 406.4077 901.54 c
401.5444 892.4624 405.7822 880.125 403.769 870.1997 c
401.0117 856.6094 393.6528 841.564 395.7793 827.5024 c
397.5142 816.0371 406.6606 807.6689 414.6821 800.0806 c
423.71 791.5386 438.4751 775.6201 452.4053 777.7925 c
466.3765 779.9707 471.8687 799.3076 481.022 808.0215 c
491.7617 818.2461 503.6191 815.979 516.9404 813.7329 c
524.7021 812.4233 532.1094 814.0029 539.7109 813.0293 c
545.8184 812.2461 551.1279 807.5601 556.7549 806.9492 c
561.5195 806.4321 566.3594 810.5566 569.5439 813.5913 c
578.6201 822.2397 581.8076 835.0283 590.7998 843.7993 c
601.248 853.9902 603.5791 863.188 599.5273 877.1982 c
595.7656 890.2031 588.373 901.8018 577.4014 909.9165 c
f
0.222843 0.581903 0.805203 0.06424 k
569.9688 885.4385 m
565.7705 882.0859 568.9893 875.5181 574.2031 877.1328 c
580.2539 879.0063 576.8594 890.9233 569.9688 885.4385 c
f
411.0972 868.6489 m
408.6011 866.6558 410.5151 862.75 413.6157 863.71 c
417.2139 864.8242 415.1943 871.9116 411.0972 868.6489 c
f
557.1172 881.0244 m
554.6191 879.0303 556.5342 875.1255 559.6348 876.0854 c
563.2324 877.1997 561.2129 884.2861 557.1172 881.0244 c
f
478.519 946.2412 m
476.0225 944.2466 477.9365 940.3418 481.0371 941.3022 c
484.6348 942.416 482.6162 949.5024 478.519 946.2412 c
f
503.2832 912.8765 m
500.7856 910.8823 502.6992 906.9775 505.8008 907.937 c
509.3984 909.0518 507.3789 916.1377 503.2832 912.8765 c
f
0.259678 0.614282 0.880491 0.112215 k
462.373 814.2808 m
458.3867 813.9399 457.4023 808.0547 461.2139 806.5825 c
466.79 804.4302 469.9053 814.9243 462.373 814.2808 c
f
594.8271 866.5474 m
591.8369 866.2925 591.0977 861.876 593.957 860.7715 c
598.1396 859.1558 600.4795 867.0308 594.8271 866.5474 c
f
543.625 782.2349 m
540.6338 781.979 539.8965 777.563 542.7559 776.4585 c
546.9395 774.8428 549.2764 782.7178 543.625 782.2349 c
f
0.332555 0.661738 0.878141 0.255344 k
415.2573 767.707 m
411.0317 767.3115 409.0166 761.9189 413.312 760.0376 c
419.3193 757.4067 423.917 768.5176 415.2573 767.707 c
f
0.176303 0.543633 0.764004 0.022583 k
503.5391 795.3057 m
503.2803 786.5596 495.0459 785.2715 488.4429 782.7295 c
485.0762 781.4336 478.2012 776.1377 475.2231 779.1602 c
472.2266 782.2031 476.729 795.1372 478.2437 798.2578 c
483.3354 808.7495 503.9775 810.1479 503.5391 795.3057 c
f
0.222843 0.581903 0.805203 0.06424 k
423.4888 840.4443 m
417.3916 849.4028 394.0723 836.9805 402.2964 820.4717 c
405.5552 813.9321 415.0571 802.9355 420.4878 814.1641 c
422.2471 817.8027 421.1411 821.4688 421.6616 825.29 c
422.1631 828.9653 425.2104 832.7388 424.8408 836.4175 c
424.6748 838.0674 424.1997 839.4009 423.4888 840.4443 c
f
/BBAccumRotation (0.934836) XT
0.176303 0.543633 0.764004 0.022583 k
502.7422 785.7686 m
500.6533 785.3506 492.9297 780.7427 493.2451 778.2588 c
493.7983 773.8989 505.4453 774.0015 507.752 776.3018 c
511.9141 780.4531 508.5166 786.9233 502.7422 785.7686 c
f
0.222843 0.581903 0.805203 0.06424 k
583.9287 854.8296 m
579.5215 862.0049 568.5137 862.709 561.6152 859.207 c
550.9473 853.792 557.2725 841.7607 565.3701 837.4463 c
574.3574 832.6572 590.2324 844.5581 583.9287 854.8296 c
f
0.332555 0.661738 0.878141 0.255344 k
581.79 857.209 m
578.0156 863.3564 568.584 863.959 562.6748 860.9595 c
553.5352 856.3203 558.957 846.0146 565.8906 842.3184 c
573.5908 838.2158 587.1885 848.4102 581.79 857.209 c
f
0.222843 0.581903 0.805203 0.06424 k
517.1738 868.5869 m
513.498 874.5723 504.3164 875.1602 498.5635 872.2393 c
489.6641 867.7217 494.9414 857.687 501.6953 854.0879 c
509.1904 850.0933 522.4326 860.0205 517.1738 868.5869 c
f
0.332555 0.661738 0.878141 0.255344 k
513.3691 870.5205 m
510.165 875.7383 502.1592 876.25 497.1436 873.7036 c
489.3853 869.7656 493.9863 861.0166 499.875 857.8794 c
506.4092 854.3965 517.9551 863.0518 513.3691 870.5205 c
f
0.259678 0.614282 0.880491 0.112215 k
574.5938 930.2427 m
570.918 936.2275 561.7373 936.8154 555.9824 933.894 c
547.084 929.3765 552.3623 919.3418 559.1143 915.7427 c
566.6104 911.748 579.8535 921.6758 574.5938 930.2427 c
f
0.332555 0.661738 0.878141 0.255344 k
573.1768 932.2046 m
569.9727 937.4224 561.9688 937.9351 556.9521 935.3887 c
549.1924 931.4497 553.7939 922.7012 559.6816 919.5635 c
566.2168 916.0811 577.7617 924.7358 573.1768 932.2046 c
f
0.222843 0.581903 0.805203 0.06424 k
473.7847 909.5391 m
482.6367 911.8218 490.2373 919.8374 486.1709 930.3213 c
479.2969 948.0439 450.1904 939.6255 454.2886 920.3335 c
456.4438 910.1909 465.644 907.4399 473.7847 909.5391 c
f
0.332555 0.661738 0.878141 0.255344 k
468.125 914.6143 m
475.1978 916.4385 481.2686 922.8418 478.0205 931.2173 c
472.5293 945.3755 449.2764 938.6499 452.5503 923.2378 c
454.2715 915.1348 461.6221 912.9375 468.125 914.6143 c
f
537.917 751.0874 m
545.3936 753.0142 551.8164 759.7861 548.3809 768.6445 c
542.5742 783.6147 517.9844 776.5029 521.4473 760.2061 c
523.2676 751.6372 531.0391 749.3135 537.917 751.0874 c
f
601.8506 810.2344 m
608.4082 811.9243 614.04 817.8643 611.0283 825.6323 c
605.9355 838.7627 584.3682 832.5264 587.4043 818.2324 c
589.001 810.7168 595.8174 808.6782 601.8506 810.2344 c
f
0.36817 0.755611 1 0.450599 k
600.127 813.1934 m
605.543 814.5889 610.1943 819.4956 607.707 825.9111 c
603.501 836.7573 585.6875 831.6055 588.1973 819.7988 c
589.5146 813.5923 595.1445 811.9087 600.127 813.1934 c
f
534.7393 753.7109 m
541.1973 755.376 546.7432 761.2251 543.7773 768.8755 c
538.7617 781.8057 517.5234 775.6641 520.5137 761.5874 c
522.0869 754.1875 528.7988 752.1792 534.7393 753.7109 c
f
0.259678 0.614282 0.880491 0.112215 k
410.6899 831.0127 m
418.3267 832.9814 424.8833 839.8965 421.3745 848.9399 c
415.4453 864.2285 390.3374 856.9663 393.8721 840.3247 c
395.7305 831.5752 403.667 829.2012 410.6899 831.0127 c
f
0.36817 0.755611 1 0.450599 k
408.4326 834.8535 m
414.3164 836.3711 419.3687 841.6992 416.665 848.668 c
412.0957 860.4463 392.7505 854.8516 395.4741 842.0288 c
396.9063 835.2866 403.021 833.459 408.4326 834.8535 c
f
0.259678 0.614282 0.880491 0.112215 k
437.4385 763.0386 m
445.0752 765.0068 451.6309 771.9219 448.123 780.9658 c
442.1934 796.2539 417.0854 788.9917 420.6201 772.3501 c
422.4795 763.6016 430.415 761.2266 437.4385 763.0386 c
f
0.36817 0.755611 1 0.450599 k
437.5522 768.501 m
443.9268 770.145 449.4014 775.9185 446.4727 783.4697 c
441.5215 796.2339 420.5586 790.1709 423.5093 776.2759 c
425.0605 768.9727 431.688 766.9893 437.5522 768.501 c
f
u
0.211551 1 1 0.157137 k
463.7598 942.0786 m
452.5264 944.501 443.2139 934.4976 447.5947 923.5498 c
451.8677 912.8745 466.541 913.377 472.6509 921.9033 c
479.1177 930.9292 474.0791 939.8521 463.7598 942.0786 c
f
462.0083 941.814 m
451.9136 943.9897 443.5469 935.0015 447.4829 925.1646 c
451.3228 915.5723 464.5068 916.0229 469.9971 923.6846 c
475.8086 931.7949 471.2808 939.8125 462.0083 941.814 c
Bb
1 (Unnamed gradient 23) 446.4897 930.0454 0 26.0981 1 0 0 1 0 0 Bg
26.0981 0 0 -32.4175 446.4897 945.9897 Xm
8143.4326 0 0 -32.4175 -7696.729 945.9897 Bc
25.8842 0 0 -32.4175 446.7036 945.9897 Bm
8143.4326 0 0 -32.4175 472.5879 945.9897 Bc
f
0 BB
0.272068 1 1 0.303807 k
471.2158 936.8765 m
472.603 932.8853 471.061 927.7485 467.2212 923.354 c
463.647 919.2617 459.5386 918.415 453.312 918.2266 C
460.6362 914.2285 468.0522 917.3486 471.4175 922.0454 c
475.395 927.5957 474.7925 933.1055 471.2158 936.8765 C
f
0.000031 0.919585 0.825986 0.000031 k
465.6548 939.3721 m
466.0356 938.939 466.3682 938.4287 466.6392 937.832 c
469.7212 931.0518 459.9478 924.6943 454.1011 925.689 c
450.7871 926.2544 446.6211 929.4766 447.563 933.1479 c
449.0474 938.9355 461.1436 944.4941 465.6548 939.3721 c
f
0.000031 0.702846 0.465248 0.000031 k
455.2534 933.9282 m
453.8345 935.1353 451.7593 935.5396 449.7334 934.1973 c
444.3218 930.6084 449.3955 922.0117 455.1118 926.4678 c
457.9966 928.7153 457.3184 932.1714 455.2534 933.9282 c
f
460.1533 927.8389 m
459.4736 928.417 458.479 928.6108 457.5078 927.9678 c
454.9146 926.2476 457.3457 922.1274 460.0859 924.2637 c
461.4683 925.3403 461.1436 926.9971 460.1533 927.8389 c
f
U
u
0.211551 1 1 0.157137 k
581.4844 863.168 m
576.6221 873.5815 563.0254 874.9512 556.9541 864.8433 c
551.0332 854.9854 560.3037 843.6006 570.7871 843.8887 c
581.8887 844.1948 585.9502 853.6025 581.4844 863.168 c
f
580.2148 864.4033 m
575.8457 873.7607 563.627 874.9907 558.1719 865.9087 c
552.8506 857.0503 561.1816 846.8208 570.6025 847.0796 c
580.5781 847.354 584.2266 855.8071 580.2148 864.4033 c
Bb
1 (Unnamed gradient 23) 512.3311 427.6563 0 26.0967 0.6046 0.7966 -0.7966 0.6046 9875.3047 -3709.4407 Bg
15.7781 -20.7886 -25.8241 -19.5998 574.1602 879.2896 Xm
4963.3286 -6539.5088 -25.8241 -19.5998 -4389.0391 7418.6279 Bc
15.6487 -20.6182 -25.8241 -19.5998 574.2891 879.1191 Bm
4963.3286 -6539.5088 -25.8241 -19.5998 589.9375 858.501 Bc
f
0 BB
0.272068 1 1 0.303807 k
581.8486 854.0835 m
579.5068 850.5664 574.4834 848.689 568.6631 849.0908 c
563.2422 849.4639 560.084 852.2246 556.1689 857.0708 C
557.4121 848.8188 564.3799 844.7988 570.1563 844.9565 c
576.9834 845.1455 581.0078 848.9556 581.8486 854.0835 C
f
0.000031 0.919585 0.825986 0.000031 k
580.4736 860.0229 m
580.3594 859.4575 580.1533 858.8838 579.8428 858.3071 c
576.3262 851.79 564.4619 855.3335 562.6211 861.4243 c
558.4443 875.2422 582.9688 872.3696 580.4736 860.0229 c
f
0.000031 0.702846 0.465248 0.000031 k
567.3379 863.6924 m
567.667 865.5361 566.2705 867.6494 564.5908 868.2363 c
559.5059 870.0132 557.6533 861.1582 562.5693 859.7236 c
564.958 859.0269 566.9639 861.5957 567.3379 863.6924 c
f
U
u
0.211551 1 1 0.157137 k
445.0181 790.0049 m
440.1563 800.418 426.5586 801.7881 420.4873 791.6802 c
414.5664 781.8228 423.8369 770.4375 434.3218 770.7266 c
445.4224 771.0317 449.4834 780.439 445.0181 790.0049 c
f
443.748 791.2402 m
439.3789 800.5967 427.1606 801.8271 421.7046 792.7461 c
416.3853 783.8872 424.7153 773.6577 434.1367 773.916 c
444.1104 774.1914 447.7612 782.6445 443.748 791.2402 c
Bb
1 (Unnamed gradient 23) 488.1079 274.7285 0 26.0962 0.6046 0.7966 -0.7966 0.6046 9875.3047 -3709.4407 Bg
15.7778 -20.7882 -25.8227 -19.5988 437.6934 806.126 Xm
4948.6821 -6520.2119 -25.8227 -19.5988 -4510.8594 7326.1675 Bc
15.6484 -20.6178 -25.8227 -19.5988 437.8228 805.9556 Bm
4948.6821 -6520.2119 -25.8227 -19.5988 453.4712 785.3379 Bc
f
0 BB
0.272068 1 1 0.303807 k
445.3818 780.9209 m
443.0405 777.4038 438.0176 775.5264 432.1963 775.9268 c
426.7754 776.3018 423.6167 779.0615 419.7026 783.9072 C
420.9463 775.6558 427.915 771.6357 433.6909 771.793 c
440.5161 771.9814 444.5405 775.7925 445.3818 780.9209 C
f
0.000031 0.919585 0.825986 0.000031 k
442.0552 786.3369 m
441.9414 785.7749 441.7368 785.2051 441.4282 784.6313 c
437.8213 777.9189 425.5879 782.0674 423.6763 788.1401 c
419.3999 801.7354 444.687 799.3447 442.0552 786.3369 c
f
0.000031 0.702846 0.465248 0.000031 k
430.8716 790.5293 m
431.2007 792.3726 429.8032 794.4863 428.126 795.0728 c
423.0396 796.8501 421.187 787.9951 426.1025 786.561 c
428.4922 785.8647 430.4966 788.4331 430.8716 790.5293 c
f
U
u
0.211551 1 1 0.157137 k
409.4517 856.1025 m
401.373 861.6299 390.8105 856.7432 390.7393 846.7002 c
390.6699 836.9072 402.4009 832.5771 409.9629 837.3335 c
417.9688 842.3667 416.8706 851.0254 409.4517 856.1025 c
f
407.9839 856.4585 m
400.7256 861.4248 391.2354 857.0332 391.1709 848.0098 c
391.1089 839.2095 401.6494 835.3198 408.4448 839.5923 c
415.6382 844.1152 414.6514 851.8955 407.9839 856.4585 c
Bb
1 (Unnamed gradient 23) 396.1553 544.7236 0 22.2256 0.9258 0.3781 -0.3781 0.9258 3675.9783 -2760.7529 Bg
20.5764 -8.40349 -10.663 -26.1089 397.2056 865.0225 Xm
7492.1851 -3059.835 -10.663 -26.1089 -7094.811 3924.7886 Bc
20.4078 -8.33461 -10.663 -26.1089 397.374 864.9536 Bm
7492.1851 -3059.835 -10.663 -26.1089 417.7817 856.6191 Bc
f
0 BB
0.272068 1 1 0.303807 k
413.6543 849.6001 m
413.4619 846.0068 410.5928 842.4541 406.1509 840.2251 c
402.0146 838.1499 398.502 838.8052 393.5327 840.6621 C
398.0195 835.1504 404.8716 835.2236 409.0376 837.8418 c
413.9609 840.9385 415.2593 845.4756 413.6543 849.6001 C
f
0.000031 0.919585 0.825986 0.000031 k
410.0732 853.3589 m
410.2334 852.8955 410.332 852.3853 410.3535 851.8281 c
410.6011 845.4902 400.8472 843.625 396.5581 846.291 c
395.1436 847.1709 391.9751 851.2104 393.4243 853.0044 c
394.7705 854.6689 396.6167 852.1904 398.0679 851.7559 c
399.3345 851.376 402.0508 851.9111 401.7549 853.689 c
401.5151 855.1221 398.7534 854.708 399.0127 856.2451 c
399.25 857.6543 402.4438 857.4185 403.4126 857.354 c
406.1768 857.1758 409.1548 856.0029 410.0732 853.3589 c
f
0.211551 1 1 0.157137 k
399.7383 854.752 m
399.0527 855.4727 398.6992 855.2446 397.8647 855.5054 C
397.749 855.2051 397.7188 854.6973 397.6768 854.3633 C
397.3296 854.457 397.0405 854.6548 396.6675 854.6377 c
396.4106 854.625 397.127 851.2915 399.5522 851.9946 c
401.3784 852.5239 402.2935 855.8506 399.7383 854.752 C
f
0.451514 0.869596 0.738491 0.692348 k
399.417 852.1758 m
400.0981 852.373 400.7021 853.0581 400.8335 853.7524 c
401.0107 854.6943 400.3242 854.5234 399.6797 854.2817 c
399.1304 854.0747 399.2949 854.0703 398.7339 854.4839 C
398.5791 853.7227 398.8506 853.2739 397.9634 853.4971 C
397.5928 852.4243 398.4321 851.8901 399.417 852.1758 c
f
U
u
0.211551 1 1 0.157137 k
506.6787 878.1914 m
498.9956 883.4487 488.9497 878.8008 488.8813 869.2485 c
488.8149 859.9346 499.9722 855.8164 507.166 860.3394 c
514.7803 865.1274 513.7344 873.3613 506.6787 878.1914 c
f
505.2832 878.5298 m
498.3799 883.2539 489.3525 879.0762 489.292 870.4937 c
489.2324 862.124 499.2583 858.4238 505.7217 862.4878 c
512.5645 866.7896 511.624 874.189 505.2832 878.5298 c
Bb
1 (Unnamed gradient 23) 478.5303 602.4326 0 21.1396 0.9258 0.3781 -0.3781 0.9258 3675.9783 -2760.7529 Bg
19.5711 -7.9929 -10.216 -25.0144 495.0688 886.7666 Xm
7568.3345 -3090.9348 -10.216 -25.0144 -7073.105 3977.6357 Bc
19.4107 -7.92738 -10.216 -25.0144 495.2295 886.7012 Bm
7568.3345 -3090.9348 -10.216 -25.0144 514.6406 878.7739 Bc
f
0 BB
0.272068 1 1 0.303807 k
510.6758 872.0063 m
510.4932 868.5889 507.7627 865.209 503.5391 863.0894 c
499.6055 861.1167 496.2651 861.7397 491.5381 863.5054 C
495.8062 858.2642 502.3223 858.332 506.2842 860.8237 c
510.9678 863.7681 512.2041 868.084 510.6758 872.0063 C
f
0.000031 0.919585 0.825986 0.000031 k
507.2705 875.582 m
507.4229 875.1406 507.5146 874.6563 507.5361 874.126 c
507.7725 868.1016 498.5073 866.3262 494.4238 868.8545 c
484.1909 875.1904 503.5762 886.2158 507.2705 875.582 c
f
0.000031 0.702846 0.465248 0.000031 k
496.7598 870.0869 m
496.2295 871.5088 494.3838 872.4058 492.9727 872.124 c
488.6934 871.2666 491.0513 864.3281 495.0703 865.354 c
497.0244 865.8535 497.3633 868.4702 496.7598 870.0869 c
f
499.23 868.1328 m
499.0786 868.5396 498.5503 868.7974 498.1455 868.7163 c
496.9199 868.4702 497.5952 866.4829 498.7466 866.7769 c
499.3071 866.9199 499.4038 867.6699 499.23 868.1328 c
f
U
u
0.211551 1 1 0.157137 k
604.7803 830.2358 m
600.2959 838.3936 589.2324 838.7769 584.8613 830.2837 c
580.6006 822 588.7002 813.292 597.1592 814.083 c
606.1152 814.9214 608.8984 822.7412 604.7803 830.2358 c
f
603.6855 831.1665 m
599.6582 838.4971 589.7158 838.8413 585.791 831.2095 c
581.9619 823.7666 589.2393 815.9424 596.8418 816.6519 c
604.8887 817.4053 607.3867 824.4326 603.6855 831.1665 c
Bb
1 (Unnamed gradient 23) 590.3809 361.1211 0 21.1396 0.6556 0.7551 -0.7551 0.6556 9139.8662 -3857.7468 Bg
13.8592 -15.9625 -20.4028 -17.7143 598.2881 843.125 Xm
5432.8037 -6257.3369 -20.4028 -17.7143 -4834.4023 7100.3311 Bc
13.7456 -15.8317 -20.4028 -17.7143 598.4014 842.9941 Bm
5432.8037 -6257.3369 -20.4028 -17.7143 612.1465 827.1626 Bc
f
0 BB
0.272068 1 1 0.303807 k
605.5576 822.9121 m
603.8516 819.9448 599.8916 818.1597 595.165 818.1733 c
590.7637 818.188 588.0635 820.2505 584.6416 823.9595 C
586.0859 817.3564 591.9336 814.4771 596.5938 814.9126 c
602.0996 815.4277 605.1504 818.7222 605.5576 822.9121 C
f
0.000031 0.919585 0.825986 0.000031 k
604.1299 827.6396 m
604.0674 827.1768 603.9316 826.7021 603.71 826.2192 c
601.2012 820.7329 592.1211 823.3364 589.626 827.439 c
588.8008 828.7939 587.8447 833.5806 589.8467 834.4814 c
591.7041 835.3184 592.207 832.4214 593.252 831.4292 c
594.165 830.5635 596.6992 829.853 597.21 831.4893 c
597.6221 832.8076 595.1006 833.6416 595.9805 834.8359 c
596.7861 835.9297 599.3965 834.3589 600.1914 833.8877 c
602.4609 832.5513 604.4854 830.2778 604.1299 827.6396 c
f
0.211551 1 1 0.157137 k
595.957 833.2563 m
595.6836 834.1611 595.2852 834.1211 594.6895 834.7002 C
594.4619 834.4946 594.2178 834.0771 594.04 833.811 C
593.7842 834.0396 593.624 834.3315 593.2998 834.4766 c
593.0762 834.5762 592.2529 831.4395 594.6133 830.9961 c
596.3916 830.6611 598.5957 833.0928 595.957 833.2563 C
f
0.451514 0.869596 0.738491 0.692348 k
594.5781 831.2075 m
595.2393 831.083 596.0469 831.4053 596.457 831.938 c
597.0098 832.6611 596.3535 832.8101 595.7041 832.8823 c
595.1494 832.9429 595.2871 832.8682 594.9863 833.46 C
594.5313 832.8799 594.5674 832.3828 593.9102 832.9526 C
593.1357 832.2002 593.6191 831.3877 594.5781 831.2075 c
f
0.000031 0.702846 0.465248 0.000031 k
593.3174 829.9058 m
593.4844 831.4141 592.2422 833.0488 590.8564 833.4331 c
586.6484 834.5981 585.625 827.3423 589.6729 826.4453 c
591.6426 826.0088 593.126 828.1914 593.3174 829.9058 c
f
U
u
0.211551 1 1 0.157137 k
571.1953 937.1919 m
566.8027 945.3994 555.7461 945.9067 551.2803 937.4629 c
546.9268 929.2275 554.9287 920.4287 563.3965 921.126 c
572.3623 921.8633 575.2314 929.6519 571.1953 937.1919 c
f
570.1133 938.1353 m
566.166 945.5107 556.2295 945.9648 552.2197 938.3774 c
548.3086 930.9775 555.4971 923.0728 563.1074 923.6978 c
571.1621 924.3608 573.7383 931.3599 570.1133 938.1353 c
Bb
1 (Unnamed gradient 23) 536.5459 448.4512 0 21.1406 0.6471 0.7624 -0.7624 0.6471 9205.7861 -3856.9832 Bg
13.6801 -16.1176 -20.5994 -17.4841 564.8486 950.1533 Xm
5327.5293 -6276.7866 -20.5994 -17.4841 -4762.5684 7226.8076 Bc
13.568 -15.9855 -20.5994 -17.4841 564.9609 950.021 Bm
5327.5293 -6276.7866 -20.5994 -17.4841 578.5293 934.0356 Bc
f
0 BB
0.272068 1 1 0.303807 k
571.8926 929.8599 m
570.1533 926.9121 566.1729 925.1714 561.4473 925.2388 c
557.0469 925.3013 554.3701 927.395 550.9902 931.1411 C
552.3604 924.522 558.1748 921.5776 562.8389 921.9614 c
568.3516 922.4155 571.4395 925.6748 571.8926 929.8599 C
f
0.000031 0.919585 0.825986 0.000031 k
568.9355 934.6035 m
568.8672 934.1406 568.7246 933.6685 568.5 933.187 c
566.2852 928.4893 558.0078 929.5986 555.3564 933.2837 c
547.7881 943.7998 570.6221 946.1719 568.9355 934.6035 c
f
0.000031 0.702846 0.465248 0.000031 k
559.7314 936.9912 m
559.915 938.4961 558.6914 940.1436 557.3086 940.5449 c
553.1162 941.7568 552.0098 934.5127 556.0488 933.5693 c
558.0137 933.1113 559.5205 935.2773 559.7314 936.9912 c
f
U
u
0.211551 1 1 0.157137 k
536.8613 777.6724 m
528.0674 783.6904 516.5664 778.3691 516.4883 767.4351 c
516.4131 756.7725 529.1846 752.0586 537.4189 757.2378 c
546.1357 762.7178 544.9395 772.1436 536.8613 777.6724 c
f
535.2627 778.0591 m
527.3613 783.4668 517.0283 778.6846 516.958 768.8604 c
516.8906 759.2798 528.3672 755.0449 535.7656 759.6953 c
543.5986 764.6216 542.5225 773.0913 535.2627 778.0591 c
Bb
1 (Unnamed gradient 23) 542.4502 519.3779 0 24.1992 0.9258 0.3781 -0.3781 0.9258 3675.9783 -2760.7529 Bg
22.4036 -9.14972 -11.4752 -28.0976 523.4609 787.2197 Xm
7627.8311 -3115.2332 -11.4752 -28.0976 -7104.1865 3902.3779 Bc
22.22 -9.07473 -11.4752 -28.0976 523.6445 787.1445 Bm
7627.8311 -3115.2332 -11.4752 -28.0976 545.8643 778.0698 Bc
f
0 BB
0.272068 1 1 0.303807 k
541.4355 770.5928 m
541.2275 766.6802 538.1025 762.812 533.2666 760.3853 c
528.7637 758.126 524.9404 758.8389 519.5303 760.8599 C
524.415 754.8613 531.875 754.9395 536.4102 757.79 c
541.7695 761.1611 543.1846 766.1016 541.4355 770.5928 C
f
0.000031 0.919585 0.825986 0.000031 k
537.5381 774.6851 m
537.7129 774.1802 537.8203 773.625 537.8428 773.0176 c
538.1123 766.1177 527.4932 764.0864 522.8242 766.9902 c
521.2832 767.9478 517.834 772.3447 519.4111 774.2988 c
520.8779 776.1123 522.8877 773.4121 524.4668 772.9385 c
525.8477 772.5249 528.8037 773.1089 528.4814 775.0439 c
528.2207 776.6045 525.2139 776.1533 525.4951 777.8271 c
525.7549 779.3613 529.2314 779.105 530.2861 779.0352 c
533.2969 778.8408 536.5391 777.564 537.5381 774.6851 c
f
0.211551 1 1 0.157137 k
526.2861 776.2012 m
525.54 776.9858 525.1543 776.7383 524.248 777.022 C
524.1191 776.6943 524.0879 776.1426 524.043 775.7783 C
523.6631 775.8799 523.3496 776.0957 522.9434 776.0767 c
522.6621 776.0625 523.4434 772.4336 526.084 773.1992 c
528.0723 773.7759 529.0674 777.3975 526.2861 776.2012 C
f
0.451514 0.869596 0.738491 0.692348 k
525.9355 773.3965 m
526.6787 773.6118 527.3359 774.3574 527.4785 775.1133 c
527.6729 776.1377 526.9248 775.9521 526.2217 775.6895 c
525.624 775.4648 525.8037 775.4595 525.1934 775.9087 C
525.0244 775.0801 525.3203 774.5923 524.3525 774.835 C
523.9512 773.6665 524.8652 773.0859 525.9355 773.3965 c
f
0.000031 0.702846 0.465248 0.000031 k
525.3203 771.417 m
524.7139 773.0435 522.6006 774.0708 520.9844 773.748 c
516.0869 772.7671 518.7861 764.8242 523.3867 765.998 c
525.6221 766.5703 526.0107 769.5654 525.3203 771.417 c
f
U
0.176303 0.543633 0.764004 0.022583 k
440.0962 943.3853 m
435.9272 943.248 432.8052 938.3066 437.6367 936.2129 c
443.4819 933.6792 448.0117 943.647 440.0962 943.3853 c
f
432.7861 932.582 m
430.8101 932.5176 429.3301 930.1753 431.6206 929.1836 c
434.3916 927.9829 436.5366 932.7065 432.7861 932.582 c
f
0.072755 0.38764 0.658961 0.000031 k
414.752 904.0762 m
409.1416 903.8911 404.9404 897.2417 411.4419 894.4243 c
419.3086 891.0151 425.4033 904.4287 414.752 904.0762 c
f
425.8115 909.5181 m
422.0327 909.3936 419.2026 904.9141 423.5825 903.0161 c
428.8813 900.7197 432.9873 909.7549 425.8115 909.5181 c
f
U
u
1 Ap
0.36817 0.755611 1 0.450599 k
967.6406 837.3564 m
968.1553 845.562 968.999 853.6533 967.8057 862.0127 c
966.4893 871.2178 962.042 879.3096 960.4375 888.2988 c
957.9668 902.1396 945.0928 909.937 936.3428 919.708 c
924.4814 932.9556 915.5283 945.6733 898.6055 952.7959 c
887.3145 957.5498 876.2461 964.4741 864.2959 967.2656 c
836.2227 973.8223 809.498 967.73 783.2451 957.5752 c
774.791 954.3047 765.1543 952.0488 757.8652 946.7866 c
746.8271 938.8154 739.9951 924.1338 730.3672 914.4907 c
717.5078 901.6094 710.6436 893.0913 709.0889 873.8657 c
708.3301 864.5024 710.9639 857.3926 707.1787 848.5474 c
700.5273 833.002 701.5498 818.5142 706.6055 802.1372 c
715.0693 774.7246 728.0713 745.9165 753.5508 730.4453 c
780.418 714.1333 821.3066 703.5215 852.5723 704.3848 c
874.7939 704.998 889.8926 718.1758 908.0625 728.9102 c
929.5762 741.6201 951.7695 752.7119 958.041 779.4023 c
962.2051 797.1279 966.9854 812.1538 967.3379 830.5537 c
967.3809 832.835 967.498 835.0996 967.6406 837.3564 c
f
0.332555 0.661738 0.878141 0.255344 k
963.6436 841.8013 m
964.1553 849.9233 964.9893 857.9336 963.8057 866.208 c
962.5059 875.3203 958.1025 883.3311 956.5146 892.23 c
954.0693 905.9312 941.3252 913.6494 932.6621 923.3213 c
920.9199 936.4346 912.0566 949.0239 895.3066 956.0762 c
884.1279 960.7808 873.1719 967.6362 861.3428 970.3989 c
833.5527 976.8901 807.0967 970.8584 781.1104 960.8057 c
772.7412 957.5688 763.2021 955.3359 755.9873 950.127 c
745.0596 942.2354 738.2959 927.7021 728.7656 918.1572 c
716.0361 905.4053 709.2402 896.9727 707.7021 877.9414 c
706.9512 868.6719 709.5586 861.6348 705.8105 852.8789 c
699.2256 837.4897 700.2383 823.146 705.2441 806.936 c
711.8516 785.5254 723.751 758.791 743.6758 746.7959 c
760.1758 736.8628 780.8652 734.5557 798.5771 727.1885 c
817.2217 719.4326 834.5977 709.2979 855.4756 713.9653 c
875.0703 718.3447 893.9453 730.4678 912.3662 738.353 c
943.5635 751.7075 947.3125 782.0869 960.3096 810.1621 c
963.9668 818.0596 963.1855 826.7485 963.3428 835.0664 c
963.3867 837.3252 963.5029 839.5674 963.6436 841.8013 c
f
0 Ap
0.259678 0.614282 0.880491 0.112215 k
753.8652 939.5171 m
756.2119 943.0488 758.7393 946.4238 761.9541 949.2764 c
768.6426 955.2178 780.3848 958.7207 788.96 960.4492 c
798.2666 962.3252 807.7891 961.3643 817.1797 962.3511 c
825.917 963.2695 834.2334 966.27 843.1416 967.0015 c
859.3193 968.3296 875.585 959.4082 889.2959 951.7427 c
900.4063 945.5313 906.0225 937.6519 913.4736 927.748 c
923.0508 915.0151 939.7666 910.062 949.1016 897.7378 c
956.498 887.9697 954.7559 877.7222 953.7861 866.5098 c
953.0107 857.5391 955.6084 849.2861 955.4688 840.415 c
955.2031 823.4717 950.4551 803.8433 934.2705 795.3247 c
921.4307 788.5679 912.0771 780.7896 902.8135 769.4336 c
889.8877 753.5869 877.9268 734.3687 859.6826 724.0532 c
831.6299 708.1924 814.499 736.6792 790.5625 745.6836 c
771.9717 752.6777 749.332 752.1719 732.7715 764.0244 c
710.3115 780.0986 698.5195 819.6812 711.5635 844.6694 c
715.0557 851.3613 719.7979 855.6792 719.5225 863.7285 c
719.3203 869.6182 713.9678 874.687 712.6221 880.2705 c
711.3301 885.6333 712.9346 891.4263 715.2842 896.2905 c
720.1982 906.4629 730.3467 913.2847 738.9102 920.1553 c
745.5762 925.5039 749.3955 932.7949 753.8652 939.5171 c
f
0.222843 0.581903 0.805203 0.06424 k
784.5156 955.3643 m
792.2344 957.6152 800.4072 958.1328 808.4482 956.4331 c
822.292 953.5059 833.2988 955.6387 846.8896 958.9873 c
866.9463 963.9277 884.4482 950.8525 895.6904 935.0781 c
916.2119 906.29 955.3496 899.9585 948.5781 856.1816 c
947.0801 846.4858 948.7139 831.5688 942.5078 823.481 c
933.8115 812.1484 913.9688 813.584 901.7861 808.4346 c
887.458 802.377 884.2754 791.3369 873.4531 782.1694 c
863.5918 773.8125 850.3018 774.6294 838.3818 771.0635 c
823.9941 766.7598 810.8145 756.4424 795.3242 756.688 c
784.1211 756.8652 770.4902 761.8906 761.6777 768.8296 c
756.3145 773.0508 752.0898 778.6777 746.4971 782.5884 c
740.3828 786.8613 732.6436 788.0449 726.6592 792.3774 c
717.3633 799.1104 710.5869 811.4243 710.0674 822.7285 c
709.3076 839.2573 727.8857 848.9492 726.1455 864.2778 c
725.0918 873.5527 715.1543 878.6543 716.043 888.4697 c
716.9287 898.2378 727.3271 906.3657 735.1592 910.6377 c
741.8418 914.2817 745.3457 918.9175 748.7285 925.6147 c
755.8877 939.7773 769.3164 950.9312 784.5156 955.3643 c
f
0.176303 0.543633 0.764004 0.022583 k
888.7451 817.7324 m
905.4307 817.2881 904.7998 831.9941 915.2725 840.3213 c
928.335 850.7041 941.1436 862.9121 932.2402 880.9282 c
927.1309 891.2651 917.75 898.7896 910.3271 907.3638 c
903.4893 915.2637 899.002 924.2974 893.3711 933.0029 c
879.0625 955.1221 859.5967 959.0181 835.3711 952.3896 c
821.9805 948.7261 811.2363 950.4707 797.8369 950.8223 c
787.46 951.0947 780.5156 948.6821 773.8438 940.5493 c
766.0615 931.0591 767.3672 916.9888 756.9678 909.2773 c
747.6553 902.3721 724.9951 902.4863 720.4707 890.1846 c
716.5693 879.585 730.6621 869.1426 732.3535 859.2275 c
733.3652 853.2939 729.6377 847.8071 727.0723 842.6436 c
721.5332 831.5 717.085 821.1973 721.6709 808.8486 c
727.2432 793.8447 736.4023 796.436 749.708 791.8706 c
754.2451 790.313 757.6211 785.498 761.6025 784.4932 c
773.1807 781.5713 782.8047 796.9072 793.4561 799.8291 c
809.1309 804.1279 817.0283 791.3101 830.8066 787.0811 c
840.5986 784.0762 844.9678 789.9907 849.6406 797.895 c
853.2607 804.0205 854.7705 814.2979 860.1738 819.105 c
867.2871 825.4351 880.5723 817.9492 888.7451 817.7324 c
f
0.259678 0.614282 0.880491 0.112215 k
861.123 805.9297 m
856.5488 797.145 862.5127 781.6499 874.7246 787.1396 c
889.8838 793.9541 866.4482 816.1074 861.123 805.9297 c
f
0.222843 0.581903 0.805203 0.06424 k
789.6465 945.3306 m
790.6455 946.0576 791.6729 946.5703 792.7051 946.8086 c
801.8926 948.9346 811.1807 938.6636 807.709 930.2456 c
805.8652 925.7734 790.7295 916.0186 785.5215 917.9541 c
776.1357 921.4404 781.9639 939.7339 789.6465 945.3306 c
f
747.9063 851.9668 m
743.709 848.6138 746.9277 842.0474 752.1406 843.6611 c
758.1924 845.5342 754.7979 857.4521 747.9063 851.9668 c
f
900.7988 841.707 m
898.3027 839.7134 900.2158 835.8081 903.3174 836.7681 c
906.916 837.8823 904.8955 844.9692 900.7988 841.707 c
f
813.3154 946.2412 m
810.8184 944.2466 812.7334 940.3418 815.833 941.3022 c
819.4316 942.416 817.4131 949.5024 813.3154 946.2412 c
f
875.3096 886.2983 m
872.8135 884.3047 874.7266 880.3994 877.8281 881.3594 c
881.4248 882.4736 879.4063 889.5596 875.3096 886.2983 c
f
0.259678 0.614282 0.880491 0.112215 k
846.0254 940.3872 m
842.04 940.0464 841.0557 934.1606 844.8682 932.689 c
850.4434 930.5361 853.5586 941.0308 846.0254 940.3872 c
f
771.623 819.3066 m
768.6318 819.0513 767.8926 814.6357 770.7529 813.5303 c
774.9365 811.915 777.2754 819.7896 771.623 819.3066 c
f
859.2461 785.2427 m
856.2539 784.9873 855.5176 780.5713 858.377 779.4668 c
862.5605 777.8511 864.8975 785.7256 859.2461 785.2427 c
f
925.6338 871.7197 m
921.6475 871.3789 920.6621 865.4937 924.4736 864.022 c
930.0498 861.8687 933.1641 872.3633 925.6338 871.7197 c
f
0.332555 0.661738 0.878141 0.255344 k
741.1924 771.6724 m
736.9658 771.2778 734.9512 765.8838 739.2471 764.0034 c
745.2539 761.3726 749.8506 772.4834 741.1924 771.6724 c
f
0.072755 0.38764 0.658961 0.000031 k
757.2813 805.0781 m
751.6719 804.8926 747.4707 798.2437 753.9727 795.4258 c
761.8379 792.0171 767.9326 805.4297 757.2813 805.0781 c
f
0.222843 0.581903 0.805203 0.06424 k
902.8652 801.4395 m
897.2539 801.2539 893.0537 794.6045 899.5557 791.7871 c
907.4219 788.3779 913.5166 801.7905 902.8652 801.4395 c
f
0.072755 0.38764 0.658961 0.000031 k
769.1631 801.4868 m
766.5273 801.3999 764.5527 798.2754 767.6074 796.9521 c
771.3027 795.3501 774.167 801.6519 769.1631 801.4868 c
f
U
u
1 Ap
0.36817 0.755611 1 0.450599 k
967.6406 498.6406 m
968.1553 506.8467 968.999 514.9385 967.8057 523.2974 c
966.4893 532.5029 962.042 540.5952 960.4375 549.585 c
957.9668 563.4253 945.0928 571.2231 936.3428 580.9927 c
924.4814 594.2402 915.5283 606.958 898.6055 614.0811 c
887.3145 618.8345 876.2461 625.7588 864.2959 628.5508 c
836.2227 635.1074 809.498 629.0142 783.2451 618.8594 c
774.791 615.5903 765.1543 613.3345 757.8652 608.0718 c
746.8271 600.1006 739.9951 585.4194 730.3672 575.7764 c
717.5078 562.8955 710.6436 554.3755 709.0889 535.1514 c
708.3301 525.7871 710.9639 518.6782 707.1787 509.8311 c
700.0703 493.2207 702.5469 465.1445 706.6172 447.6572 c
710.1289 432.5664 725.5684 418.1143 735.8789 407.167 c
752.7256 389.2773 776.0908 390.3447 797.7734 382.3174 c
809.0889 378.1289 819.5781 371.5234 831.6006 369.4121 c
859.0557 364.5889 885.2715 382.2324 909.3984 392.3691 c
920.6348 397.0889 931.7197 399.2383 939.5352 409.0781 c
947.0713 418.5703 955.1855 428.5322 958.041 440.6865 c
962.2051 458.4131 966.9854 473.4385 967.3379 491.8389 c
967.3809 494.1201 967.498 496.3838 967.6406 498.6406 c
f
0.332555 0.661738 0.878141 0.255344 k
963.6436 503.0869 m
964.1553 511.208 964.9893 519.2183 963.8057 527.4922 c
962.5059 536.6055 958.1025 544.6162 956.5146 553.5146 c
954.0693 567.2158 941.3252 574.9341 932.6621 584.606 c
920.9199 597.7197 912.0566 610.3091 895.3066 617.3604 c
884.1279 622.0659 873.1719 628.9204 861.3428 631.6836 c
833.5527 638.1753 807.0967 632.1436 781.1104 622.0913 c
771.2979 618.2959 761.7002 615.8374 753.4082 609.1475 c
745.4873 602.7563 740.0391 594.2939 732.7256 587.3232 c
718.46 573.73 706.8994 563.2676 705.8398 542.2749 c
705.1641 528.9106 700.6494 516.4204 700.8281 503.0474 c
701.0166 488.9922 704.0742 475.2031 704.1963 461.1934 c
704.3125 447.7246 709.1992 443.4961 717.1357 433.4023 c
725.0068 423.3896 732.6641 414.709 743.6758 408.0811 c
760.1758 398.1475 780.8652 395.8408 798.5771 388.4746 c
817.2217 380.7178 834.5977 370.583 855.4756 375.251 c
875.0703 379.6299 893.9453 391.7529 912.3662 399.6377 c
943.5635 412.9922 947.3125 443.3711 960.3096 471.4473 c
963.9668 479.3447 963.1855 488.0352 963.3428 496.3516 c
963.3867 498.6104 963.5029 500.853 963.6436 503.0869 c
f
0 Ap
0.259678 0.614282 0.880491 0.112215 k
753.8652 600.8022 m
756.2119 604.3345 758.7393 607.7085 761.9541 610.5615 c
768.6426 616.5024 780.3848 620.0054 788.96 621.7334 c
798.2666 623.6104 807.7891 622.6484 817.1797 623.6362 c
825.917 624.5547 834.2334 627.5552 843.1416 628.2866 c
859.3193 629.6143 875.585 620.6934 889.2959 613.0273 c
900.4063 606.8164 906.0225 598.9365 913.4736 589.0327 c
923.0508 576.3008 939.7666 571.3477 949.1016 559.0229 c
957.4307 548.0229 953.75 533.3667 954.9346 520.5991 c
956.1504 507.4727 961.7051 491.9775 955.9463 479.3818 c
948.9629 464.1113 947.2109 442.1699 930.6973 434.375 c
920.9443 429.7744 912.5928 426.1904 904.0938 419.1807 c
890.4453 407.9268 877.2852 395.9648 860.4805 389.5596 c
846.9004 384.3809 832.7832 383.6338 819.7939 390.6455 c
810.1855 395.835 802.5488 401.3594 791.6465 403.876 c
765.873 409.8252 741.5654 411.8145 723.4551 433.6318 c
708.0391 452.2061 699.6533 483.1396 711.5635 505.9546 c
715.0557 512.6465 719.7979 516.9639 719.5225 525.0142 c
719.3203 530.9038 713.9678 535.9717 712.6221 541.5547 c
711.3301 546.917 712.9346 552.7109 715.2842 557.5757 c
720.1982 567.748 730.3467 574.5693 738.9102 581.4409 c
745.5762 586.7886 749.3955 594.0791 753.8652 600.8022 c
f
0.222843 0.581903 0.805203 0.06424 k
784.5156 616.6489 m
792.2344 618.9004 800.4072 619.4185 808.4482 617.7173 c
822.292 614.7905 833.2988 616.9238 846.8896 620.2725 c
866.9463 625.2134 884.4482 612.1382 895.6904 596.3638 c
916.2119 567.5752 955.3496 561.2437 948.5781 517.4668 c
947.0801 507.771 948.7139 492.8545 942.5078 484.7666 c
933.8115 473.4336 913.9688 474.8701 901.7861 469.7197 c
887.458 463.6621 884.2754 452.6211 873.4531 443.4551 c
863.5918 435.0967 850.3018 435.9141 838.3818 432.3486 c
823.9941 428.0449 810.8145 417.7266 795.3242 417.9736 c
784.1211 418.1494 770.4902 423.1758 761.6777 430.1143 c
748.6064 440.4043 728.9854 438.292 720.7695 454.7041 c
714.3652 467.498 711.7119 484.1953 715.6348 498.0771 c
718.6807 508.8535 726.582 515.8184 722.416 527.3687 c
718.4941 538.2383 712.8262 545.2383 720.0488 556.6357 c
727.4404 568.2964 742.5957 574.7646 748.7285 586.8984 c
755.8877 601.063 769.3164 612.2148 784.5156 616.6489 c
f
0.176303 0.543633 0.764004 0.022583 k
892.084 479.3564 m
894.4795 481.458 896.9785 483.3506 899.9189 484.3066 c
908.0098 486.9375 915.2412 482.0283 923.2119 481.8096 c
941.3252 481.3145 944.8965 489.3115 943.1172 505.561 c
942.0596 515.2109 948.125 532.2666 942.6211 540.3071 c
939.3125 545.1421 932.7188 546.207 928.2109 549.498 c
921.9092 554.1011 920.1201 560.9639 915.4648 566.7632 c
911.3154 571.9346 908.5908 570.4287 903.3574 573.1602 c
888.1465 581.0996 892.0615 602.1919 878.6973 611.4033 c
864.459 621.2192 843.3115 622.0381 830.0771 610.1621 c
820.8154 601.8516 809.7109 598.4053 797.25 600.1958 c
790.167 601.2124 786.375 606.3101 778.3857 604.6675 c
767.375 602.4033 761.6465 593.7271 756.5723 584.9854 c
750.626 574.7417 740.5918 567.6157 734.5508 557.4082 c
727.21 545.0059 738.8945 539.77 741.2002 528.3574 c
743.9619 514.6738 726.0645 517.7793 724.4502 507.7397 c
723.1895 499.9243 734.3301 496.543 735.2979 489.0283 c
736.7295 477.8984 724.3594 468.6299 727.7754 456.2051 c
730.791 445.2461 740.6279 445.9609 749.4316 441.998 c
757.2256 438.4902 762.7734 430.9316 771.7773 430.6621 c
786.1738 430.2305 795.3184 443.7871 794.9365 456.8066 c
794.5488 470.041 787.3105 483.749 802.2529 491.7471 c
815.5781 498.8809 835.8838 493.8535 846.1191 483.4307 c
857.0674 472.2813 866.7256 462.4473 883.3281 472.1758 c
886.4844 474.0244 889.209 476.8398 892.084 479.3564 c
f
0.433814 0.796536 0.845457 0.663325 k
705.4531 515.75 m
707.1465 533.3643 715.207 552.5566 722.9199 568.0391 c
735.9932 594.2803 766.6572 593.1265 790.1855 607.5933 c
834.0596 634.5718 872.8516 631.3604 907.3018 592.0654 c
916.4063 581.6792 925.8311 572.855 936.9844 564.7148 c
944.9287 558.9146 952.5059 554.251 955.707 544.4985 c
962.0889 525.0493 961.7939 494.2959 959.4541 474.2441 c
957.2471 455.3076 953.8848 425.8428 936.9541 414.0947 c
919.4727 401.9678 897.6309 400.8926 878.1348 393.7871 c
860.6738 387.4238 836.0957 370.4248 817.2881 378.6445 c
806.1543 383.5088 799.2275 394.9189 787.9141 399.9766 c
775.6494 405.4609 761.3652 402.8721 749.3105 408.1035 c
736.8672 413.5039 735.8232 425.1211 733.7832 437.249 c
731.3525 451.6973 728.0938 468.8887 719.7637 481.0322 c
712.4609 491.6807 704.5127 497.9121 705.2041 512.312 c
705.2578 513.4487 705.3418 514.5967 705.4531 515.75 c
f
0.376135 0.694606 0.967925 0.390723 k
704.5322 518.8877 m
706.1777 536.0171 714.0176 554.6812 721.5176 569.7363 c
734.2314 595.2544 764.0498 594.1323 786.9297 608.2007 c
829.5967 634.437 867.3184 631.314 900.8203 593.1016 c
909.6738 583.001 918.8398 574.4209 929.6846 566.5039 c
937.4092 560.8628 944.7793 556.3281 947.8916 546.8442 c
954.0977 527.9312 953.8115 498.0264 951.5352 478.5254 c
949.3887 460.1113 946.1201 431.457 929.6553 420.0342 c
912.6553 408.2402 891.415 407.1943 872.4561 400.2852 c
855.4746 394.0977 831.5771 377.5654 813.2861 385.5586 c
802.459 390.291 795.7236 401.3867 784.7207 406.3057 c
772.7959 411.6367 758.9033 409.1191 747.1826 414.2061 c
735.0811 419.458 734.0664 430.7559 732.083 442.5508 c
729.7178 456.6006 726.5498 473.3174 718.4473 485.1279 c
711.3447 495.4814 703.6162 501.5405 704.2891 515.5444 c
704.3418 516.6504 704.4238 517.7666 704.5322 518.8877 c
f
0.332555 0.661738 0.878141 0.255344 k
734.2578 580.4365 m
744.3613 588.521 758.6865 587.291 770.3496 592.4951 c
783.4121 598.3257 794.9688 607.0249 807.4561 613.9268 c
824.418 623.3032 845.1211 623.0059 863.4531 617.7622 c
884.3887 611.7769 892.9229 591.2559 902.6953 573.7471 c
911.6143 557.7744 937.96 546.4404 936.2002 525.79 c
934.165 501.877 908.9326 491.5879 916.6543 464.7256 c
919.5586 454.6211 928.8164 439.2988 920.6641 429.627 c
913.4404 421.0557 892.2285 419.3184 882.1865 414.4951 c
865.2686 406.3711 846.668 394.1816 826.9766 398.3916 c
811.6504 401.668 798.957 413.8037 783.5908 416.1768 c
771.1924 418.0898 755.9121 410.7822 745.1943 420.2344 c
733.8027 430.292 742.6367 451.8008 737.2393 464.9561 c
731.2832 479.4678 716.4414 487.6191 710.71 500.9131 c
705.3262 513.4019 713.8926 529.5605 716.3916 541.7339 c
719.248 555.6533 722.3486 570.9043 734.2578 580.4365 c
f
0.376135 0.694606 0.967925 0.390723 k
900.7988 502.9922 m
898.3027 500.9985 900.2158 497.0928 903.3174 498.0537 c
906.916 499.168 904.8955 506.2539 900.7988 502.9922 c
f
750.7529 502.0522 m
748.2559 500.0591 750.1709 496.1533 753.2715 497.1143 c
756.8691 498.2266 754.8496 505.3135 750.7529 502.0522 c
f
875.2314 607.7642 m
871.2461 607.4248 870.2617 601.5381 874.0742 600.0669 c
879.6484 597.9141 882.7637 608.4087 875.2314 607.7642 c
f
752.1455 442.1523 m
747.9209 441.7568 745.9063 436.3643 750.2012 434.4844 c
756.208 431.8516 760.8066 442.9639 752.1455 442.1523 c
f
0.299931 0.630854 0.847837 0.172946 k
754.416 581.2173 m
748.8057 581.0317 744.6045 574.3813 751.1055 571.564 c
758.9717 568.1553 765.0684 581.5684 754.416 581.2173 c
f
0.332555 0.661738 0.878141 0.255344 k
928.3945 466.9443 m
922.7832 466.7578 918.584 460.1084 925.0859 457.291 c
932.9521 453.8818 939.0459 467.2959 928.3945 466.9443 c
f
0.299931 0.630854 0.847837 0.172946 k
768.7744 581.2192 m
766.1387 581.1318 764.166 578.0093 767.2188 576.6846 c
770.9141 575.0835 773.7793 581.3843 768.7744 581.2192 c
f
U
u
u
0.36817 0.755611 1 0.450599 k
628.1299 201.5723 m
623.8418 198.7129 618.8242 196.5996 613.1953 195.4072 c
599.2334 192.4502 580.3672 193.543 569.4766 203.9014 c
563.0762 209.9922 562.6631 215.7148 553.1621 218.2314 c
544.7598 220.4561 535.5732 219.3291 528.6377 225.5918 c
521.0566 232.4365 523.582 239.9609 519.4443 248.4131 c
515.417 256.6416 507.167 262.0586 502.8037 270.1797 c
499.3252 276.6553 498.063 284.459 498.5723 292.335 C
481.5352 291.2744 464.8989 286.5078 448.4487 280.1445 c
439.9951 276.874 430.3569 274.6191 423.0703 269.3564 c
412.0313 261.3867 405.1982 246.7041 395.5713 237.0605 c
382.7109 224.1807 375.8467 215.6602 374.292 196.4365 c
373.5342 187.0723 376.167 179.9629 372.3818 171.1162 c
365.7305 155.5703 366.7524 141.0811 371.8096 124.7031 c
376.416 109.7803 383.2715 97.8799 390.772 84.459 c
395.0796 76.752 397.3271 70.2021 404.811 64.9336 c
414.2583 58.2871 423.2705 50.5928 433.8628 45.7705 c
464.3569 31.8877 503.4805 20.3936 535.2832 37.2666 c
544.4932 42.1543 552.834 42.5605 562.9238 44.1279 c
575.3008 46.0488 586.2988 56.0664 594.1104 65.1699 c
600.5381 72.6602 608.4717 78.7646 614.2441 86.8379 c
620.1855 95.1533 622.1035 105.0068 626.21 114.1943 c
631.7715 126.6396 632.2832 139.6943 632.5391 153.124 c
632.584 155.4043 632.7021 157.6699 632.8438 159.9268 c
633.3604 168.1318 634.2021 176.2236 633.0088 184.582 c
632.168 190.4639 629.9844 195.9697 628.1299 201.5723 C
f
0.332555 0.661738 0.878141 0.255344 k
573.124 207.3916 m
569.4883 211.2568 566.4453 215.4307 561.9541 219.0488 c
553.0156 226.251 541.4258 222.626 532.8438 227.5967 c
523.3242 233.1113 526.1201 246.9854 522.8408 255.5098 c
518.9297 265.6719 506.9033 266.1025 503.9902 276.1523 c
502.6113 280.9121 500.6191 286.2012 500.8643 291.9463 C
496.2339 296.6484 485.4141 293.8359 479.8438 293.0332 c
462.1216 290.4785 444.5029 285.9482 428.2954 278.2061 c
415.4766 272.084 411.2354 262.335 402.8027 251.6523 c
394.957 241.7109 383.2104 234.9238 376.6167 224.0469 c
367.6729 209.2949 370.5898 190.0703 368.7314 173.624 c
366.979 158.1172 365.6987 144.8906 370.4478 129.5049 c
372.3867 123.2246 375.1055 117.1816 377.3911 111.0078 c
381.1475 100.8594 390.3657 96.8418 395.0015 86.2051 c
405.8452 61.3379 435.2559 46.1328 461.6641 45.2373 c
475.1421 44.7813 483.5527 42.3867 495.8945 37.7412 c
518.208 29.3398 529.6416 45.9443 548.873 52.6309 c
557.4209 55.6016 566.8965 54.0654 575.0732 58.4893 c
582.7871 62.6641 587.7949 70.8857 593.9863 77.002 c
599.3447 82.2939 607.9727 87.6729 611.6904 94.2119 c
614.7314 99.5605 614.5615 107.127 616.376 113.1904 c
618.584 120.5615 622.3789 125.9639 625.5137 132.7314 c
629.1699 140.6299 628.3887 149.3193 628.5469 157.6367 c
628.5898 159.8945 628.707 162.1377 628.8467 164.3711 c
629.0059 166.9092 627.501 200.9072 628.1758 201.1992 C
620.3047 197.7773 611.6279 199.4189 603.4434 198.2188 c
595.0645 196.9902 589.5566 195.7881 581.5537 200.4727 c
578.1152 202.4863 575.4932 204.873 573.124 207.3916 c
f
0.259678 0.614282 0.880491 0.112215 k
571.9414 205.8838 m
568.7637 209.8262 565.7314 214.1807 561.6094 217.5293 c
555.3555 222.6113 544.832 219.7783 537.6211 222.0615 c
530.5586 224.2988 526.7744 228.8193 524.0439 235.4199 c
521.5654 241.4043 521.6748 248.2305 519.0488 254.1494 c
516.6699 259.5127 512.1504 262.1094 507.7695 265.4941 c
503.6602 268.6689 501.9434 272.9307 500.6162 277.9785 c
497.9438 288.1484 498.3594 288.5898 487.0005 286.9229 c
477.1787 285.4795 467.353 283.9766 457.4224 283.5322 c
440.9805 282.7979 427.7852 275.6191 418.1597 263.2051 c
417.2383 262.0166 416.3501 260.7793 415.4937 259.4961 c
406.8335 246.5098 391.3105 240.2217 382.1948 227.5459 c
377.2861 220.7188 375.2939 215.2656 377.6646 207.0459 c
380.5542 197.0264 383.3213 187.9414 378.1875 177.8652 c
369.2104 160.2373 371.9395 135.6104 381.0156 118.2139 c
385.2783 110.0439 390.6587 102.5273 394.6152 94.1836 c
397.9741 87.1045 399.8887 78.3613 405.1963 72.3994 c
411.5806 65.2324 421.6318 65.0635 430.5498 65.2549 c
442.9751 65.5225 455.4336 67.1309 467.7441 64.5869 c
490.8398 59.8213 508.3477 41.4023 532.9727 52.543 c
546.2529 58.5508 556.1641 69.6064 566.5928 79.4072 c
581.4414 93.3633 604.2939 98.0674 613.6113 117.0303 c
618.1406 126.249 621.1943 137.8457 620.9941 148.1836 c
620.8281 156.7246 619.498 165.5146 620.2627 174.04 c
620.9541 181.7607 624.2002 189.2305 626.6699 196.5439 C
614.8545 195.502 603.1885 196.6631 591.4453 195.7197 c
581.8232 194.9463 576.7207 199.9492 571.9414 205.8838 c
f
0.222843 0.581903 0.805203 0.06424 k
569.4766 203.9014 m
563.0762 209.9922 562.6631 215.7148 553.1621 218.2314 c
544.7598 220.4561 535.5732 219.3291 528.6377 225.5918 c
521.0566 232.4365 523.582 239.9609 519.4443 248.4131 c
515.417 256.6416 507.167 262.0586 502.8037 270.1797 c
501.1309 273.2939 499.9702 276.7178 499.2705 280.3057 C
489.9707 278.1982 480.7275 275.7158 471.2969 276.4053 c
462.9336 277.0166 456.1948 278.6221 449.8481 277.3496 c
445.6372 276.5029 441.5991 274.3887 437.373 269.875 c
430.2627 262.2783 425.9634 252.3428 417.4512 245.998 c
401.7715 234.3096 384.6211 234.7354 384.6343 211.1338 c
384.6392 202.1973 385.9175 193.4463 384.0254 184.5928 c
382.5605 177.7402 379.1016 171.3623 378.8506 164.2568 c
378.3477 149.9541 388.8628 136.5498 395.415 124.5264 c
407.0791 103.1279 424.3369 90.9932 446.0815 81.6055 c
456.2427 77.2188 465.0239 71.209 476.5249 70.9004 c
489.46 70.5518 502.3643 77.1748 513.8643 82.4063 c
538.8545 93.7764 563.332 96.1123 576.999 122.8652 c
584.2129 136.9893 583.6377 150.9824 600.2158 156.5898 c
614.752 161.5059 618.626 172.8701 614.1143 187.4199 c
613.3018 190.0371 612.1875 192.5195 611.0928 195.002 C
597.3887 192.585 579.8301 194.0527 569.4766 203.9014 c
f
0.176303 0.543633 0.764004 0.022583 k
569.4766 203.9014 m
563.0762 209.9922 562.6631 215.7148 553.1621 218.2314 c
544.7598 220.4561 535.5732 219.3291 528.6377 225.5918 c
521.0566 232.4365 523.582 239.9609 519.4443 248.4131 c
515.417 256.6416 507.167 262.0586 502.8037 270.1797 c
501.9785 271.7139 501.2813 273.3262 500.6992 274.9922 C
500.6567 274.9824 500.6157 274.9717 500.5737 274.959 c
480.5376 269.4785 454.7939 281.0723 445.3198 257.3936 c
441.2124 247.1309 436.772 243.8398 426.876 239.3203 c
419.5825 235.9883 410.3755 231.5166 406.4077 224.1104 c
401.5444 215.0322 405.7822 202.6953 403.769 192.7695 c
399.5039 171.7383 390.8022 153.8945 399.7617 132.6992 c
406.873 115.8799 419.769 103.8877 436.0596 96.0898 c
467.4106 81.0859 480.7363 93.833 504.832 112.9375 c
514.7158 120.7773 523.5625 123.2061 536.0137 122.0176 c
545.2168 121.1387 552.9746 118.1025 560.5771 124.8965 c
568.0557 131.5771 570.0361 143.7119 576.5225 151.4209 c
584.3555 160.7275 608.4834 164.8125 610.9414 178.582 c
611.9385 184.168 609.1787 189.3965 605.8955 194.2969 C
593.1895 193.0713 578.5596 195.2617 569.4766 203.9014 c
f
0.222843 0.581903 0.805203 0.06424 k
547.1279 165.916 m
542.9297 162.5615 546.1484 155.9961 551.3623 157.6104 c
557.4131 159.4844 554.0186 171.4004 547.1279 165.916 c
f
411.0972 191.2207 m
408.6011 189.2236 410.5151 185.3203 413.6157 186.2803 c
417.2139 187.3945 415.1943 194.4805 411.0972 191.2207 c
f
557.1172 203.5928 m
554.6191 201.6016 556.5342 197.6953 559.6348 198.6553 c
563.2324 199.7695 561.2129 206.8564 557.1172 203.5928 c
f
503.2832 235.4473 m
500.7856 233.4521 502.6992 229.5479 505.8008 230.5088 c
509.3984 231.6211 507.3789 238.708 503.2832 235.4473 c
f
0.259678 0.614282 0.880491 0.112215 k
462.373 136.8496 m
458.3867 136.5107 457.4023 130.625 461.2139 129.1523 c
466.79 127 469.9053 137.4941 462.373 136.8496 c
f
543.625 104.8047 m
540.6338 104.5488 539.8965 100.1338 542.7559 99.0283 c
546.9395 97.4121 549.2764 105.2881 543.625 104.8047 c
f
0.332555 0.661738 0.878141 0.255344 k
415.2573 90.2764 m
411.0317 89.8809 409.0166 84.4873 413.312 82.6084 c
419.3193 79.9766 423.917 91.0889 415.2573 90.2764 c
f
0.222843 0.581903 0.805203 0.06424 k
423.4888 163.0137 m
417.3916 171.9736 394.0723 159.5498 402.2964 143.043 c
405.5552 136.502 415.0571 125.5049 420.4878 136.7334 c
422.2471 140.373 421.1411 144.0381 421.6616 147.8604 c
422.1631 151.5352 425.2104 155.3096 424.8408 158.9873 c
424.6748 160.6377 424.1997 161.9707 423.4888 163.0137 c
f
/BBAccumRotation (0.934836) XT
583.376 176.9727 m
582.0049 178.7324 580.4834 180.2266 579.2324 181.1563 c
574.3311 184.7959 567.0654 184.5459 561.6152 181.7764 c
551.5479 176.667 556.9775 168.415 557.665 160.4111 c
558.0537 155.8867 553.2354 148.9023 559.2451 146.3018 c
565.8301 143.4531 567.7627 152.709 570.6758 156.2109 c
574.5225 160.835 584.0996 160.7617 586.5967 165.8965 c
588.1611 169.1074 586.0518 173.543 583.376 176.9727 c
f
498.5635 194.8086 m
489.6641 190.29 494.9414 180.2559 501.6953 176.6572 c
509.1904 172.6631 522.4326 182.5898 517.1738 191.1563 c
513.498 197.1406 504.3164 197.7295 498.5635 194.8086 c
f
0.332555 0.661738 0.878141 0.255344 k
528.3789 56.2129 m
532.832 57.3594 536.6533 61.3936 534.6094 66.665 c
531.1523 75.5781 516.5137 71.3438 518.5752 61.6416 c
519.6582 56.543 524.2842 55.1582 528.3789 56.2129 c
f
0.176303 0.543633 0.764004 0.022583 k
396.1934 222.1982 m
392.0244 222.0615 388.9028 217.1191 393.7349 215.0254 c
399.5791 212.4932 404.1084 222.4609 396.1934 222.1982 c
f
0.072755 0.38764 0.658961 0.000031 k
463.2715 269.6836 m
457.6611 269.498 453.4604 262.8486 459.9619 260.0313 c
467.8276 256.623 473.9238 270.0352 463.2715 269.6836 c
f
477.2788 260.2324 m
473.5 260.1094 470.6699 255.6289 475.0493 253.7305 c
480.3481 251.4346 484.4541 260.4697 477.2788 260.2324 c
f
U
u
0.36817 0.755611 1 0.450599 k
595.7764 221.8711 m
593.7188 222.6973 590.9209 222.3896 590.4805 220.0479 c
589.9648 217.3057 594.8838 210.9199 597.5361 214.6172 c
597.9805 215.2334 599.8857 217.1514 599.8516 217.8955 c
599.8203 218.5938 597.9971 220.0049 597.5566 220.5947 c
597.1514 221.1377 596.5117 221.5762 595.7764 221.8711 c
f
0.332555 0.661738 0.878141 0.255344 k
595.7383 222.5137 m
593.8037 223.292 591.1699 223.0039 590.7568 220.7988 c
590.2705 218.2178 594.8994 212.2109 597.3945 215.6895 c
597.8125 216.2686 599.6055 218.0732 599.5752 218.7754 c
599.5459 219.4297 597.8301 220.7598 597.4141 221.3135 c
597.0332 221.8252 596.4297 222.2373 595.7383 222.5137 c
f
0.259678 0.614282 0.880491 0.112215 k
594.458 221.8799 m
593.958 221.9883 593.4531 222.0723 593.0225 221.9648 c
589.1348 220.9805 592.8506 217.3613 594.0771 215.6055 C
595.8721 216.6309 597.1211 216.6563 597.5752 217.9141 c
598.3105 219.9551 596.3555 221.4707 594.458 221.8799 c
f
U
u
0.36817 0.755611 1 0.450599 k
547.5898 285.6621 m
546.667 286.0322 545.4141 285.8945 545.2168 284.8457 c
544.9854 283.6152 547.1904 280.7529 548.3809 282.4092 c
548.5801 282.6855 549.4336 283.5459 549.417 283.8799 c
549.4043 284.1924 548.5869 284.8262 548.3896 285.0898 c
548.208 285.334 547.9199 285.5313 547.5898 285.6621 c
f
0.332555 0.661738 0.878141 0.255344 k
547.5742 285.9521 m
546.7061 286.2998 545.5254 286.1699 545.3398 285.1826 c
545.1221 284.0254 547.1982 281.3311 548.3164 282.8906 c
548.5039 283.1504 549.3076 283.958 549.2949 284.2744 c
549.2813 284.5684 548.5117 285.1631 548.3252 285.4131 c
548.1553 285.6416 547.8857 285.8262 547.5742 285.9521 c
f
0.259678 0.614282 0.880491 0.112215 k
546.998 285.667 m
546.7764 285.7168 546.5488 285.7529 546.3555 285.7041 c
544.6113 285.2637 546.2793 283.6406 546.8291 282.8525 C
547.6328 283.3135 548.1953 283.3232 548.3965 283.8887 c
548.7275 284.8047 547.8506 285.4824 546.998 285.667 c
f
U
u
0.36817 0.755611 1 0.450599 k
601.9658 212.1006 m
601.043 212.4727 599.7891 212.333 599.5898 211.2842 c
599.3594 210.0547 601.5654 207.1914 602.7559 208.8477 c
602.9541 209.126 603.8086 209.9844 603.7939 210.3193 c
603.7793 210.6318 602.9619 211.2646 602.7637 211.5303 c
602.584 211.7715 602.2949 211.9697 601.9658 212.1006 c
f
0.332555 0.661738 0.878141 0.255344 k
601.9502 212.3906 m
601.082 212.7393 599.9004 212.6094 599.7148 211.6211 c
599.4971 210.4629 601.5713 207.7686 602.6924 209.3291 c
602.8789 209.5898 603.6836 210.3984 603.668 210.7129 c
603.6563 211.0078 602.8867 211.6035 602.7002 211.8516 c
602.5293 212.0801 602.2598 212.2656 601.9502 212.3906 c
f
0.259678 0.614282 0.880491 0.112215 k
601.374 212.1064 m
601.1514 212.1543 600.9238 212.1924 600.7314 212.1445 c
598.9883 211.7031 600.6543 210.0791 601.2041 209.292 C
602.0088 209.751 602.5693 209.7637 602.7725 210.3271 c
603.1035 211.2441 602.2256 211.9209 601.374 212.1064 c
f
U
u
0.36817 0.755611 1 0.450599 k
574.0234 284.793 m
571.4473 284.2383 568.8965 282.0732 570.0205 279.4746 c
571.3398 276.4297 580.4297 273.4141 580.585 278.8193 c
580.6113 279.7227 581.2109 282.876 580.6826 283.5898 c
580.1895 284.2568 577.4541 284.4316 576.6279 284.7207 c
575.8682 284.9844 574.9443 284.9932 574.0234 284.793 c
f
/BBAccumRotation (0.594038) XT
0.332555 0.661738 0.878141 0.255344 k
573.5596 285.4023 m
571.1357 284.8789 568.7363 282.8438 569.793 280.3984 c
571.0322 277.5322 579.5869 274.6953 579.7314 279.7813 c
579.7578 280.6299 580.3232 283.5986 579.8252 284.2695 c
579.3613 284.8975 576.7871 285.0645 576.0088 285.334 c
575.2939 285.584 574.4248 285.5889 573.5596 285.4023 c
f
/BBAccumRotation (0.594038) XT
0.259678 0.614282 0.880491 0.112215 k
572.7236 283.8926 m
572.5938 283.8643 572.4736 283.8301 572.3662 283.79 c
567.001 281.874 573.2461 278.1309 576.4756 281.1504 c
579.1201 283.625 574.7305 284.3359 572.7236 283.8926 c
f
/BBAccumRotation (0.594038) XT
U
u
0.332555 0.661738 0.878141 0.255344 k
544.083 235.0225 m
543.8008 235.7383 543.8584 236.5391 544.46 237.3477 c
545.9756 239.375 549.8438 240.4316 551.999 239.0762 c
553.0342 238.4258 555.2295 236.7666 554.8096 235.2578 c
554.4619 234.0195 553.7422 234.4756 552.6182 234.2236 c
550.5117 233.751 548.4941 231.9512 546.3809 232.8887 c
545.3467 233.3496 544.4414 234.1162 544.083 235.0225 c
f
0.259678 0.614282 0.880491 0.112215 k
543.8828 235.4795 m
543.6104 236.1689 543.667 236.9414 544.249 237.7197 c
545.71 239.6748 549.4395 240.6934 551.5166 239.3877 c
552.5156 238.7598 554.6318 237.1602 554.2256 235.7061 c
553.8926 234.5117 553.1973 234.9521 552.1133 234.709 c
550.083 234.251 548.1377 232.5176 546.1006 233.4209 c
545.1035 233.8662 544.2295 234.6045 543.8828 235.4795 c
f
0.176303 0.543633 0.764004 0.022583 k
552.041 236.0586 m
553.8838 238.8867 549.4229 240.8262 547.374 239.2168 c
544.2813 236.79 551.3848 236.2246 552.041 236.0586 C
f
U
u
0.332555 0.661738 0.878141 0.255344 k
643.5918 227.874 m
644.1709 228.7061 645.0928 229.2295 646.4189 229.1592 c
649.7529 228.9795 653.7402 225.5059 653.8311 222.1523 c
653.875 220.5391 653.6592 216.917 651.6963 216.2744 c
650.085 215.75 650.0576 216.874 648.96 217.9209 c
646.8984 219.8867 643.4492 220.7852 642.9316 223.79 c
642.6816 225.2617 642.8594 226.8184 643.5918 227.874 c
f
0.259678 0.614282 0.880491 0.112215 k
643.0605 228.4258 m
643.6191 229.2275 644.5078 229.7334 645.7861 229.6641 c
648.999 229.4902 652.8457 226.1426 652.9316 222.9072 c
652.9746 221.3545 652.7676 217.8594 650.875 217.2422 c
649.3193 216.7373 649.2949 217.8193 648.2354 218.8311 c
646.249 220.7246 642.9219 221.5908 642.4238 224.4883 c
642.1816 225.9072 642.3535 227.4072 643.0605 228.4258 c
f
0.176303 0.543633 0.764004 0.022583 k
651.2832 225.2168 m
649.4336 222.6475 647.6836 221.4375 645.333 224.3389 c
644.6465 225.1846 643.2227 227.4121 644.2861 228.3096 c
645.3398 229.2012 652.1152 226.374 651.2832 225.2168 c
f
U
U
u
1 Ap
0.36817 0.755611 1 0.450599 k
298.0469 159.9268 m
298.5635 168.1318 299.4058 176.2236 298.2119 184.582 c
296.8975 193.7881 292.4487 201.8799 290.8447 210.8691 c
288.374 224.71 275.4995 232.5068 266.7505 242.2783 c
254.8867 255.5254 245.9346 268.2432 229.0132 275.3662 c
217.7217 280.1191 206.6528 287.0459 194.7031 289.8369 c
166.6294 296.3926 139.9043 290.2988 113.6533 280.1445 c
105.1992 276.874 95.5605 274.6191 88.2739 269.3564 c
77.2349 261.3867 70.4014 246.7041 60.7754 237.0605 c
47.9155 224.1807 41.0508 215.6602 39.4951 196.4365 c
38.7373 187.0723 41.3716 179.9629 37.5859 171.1162 c
30.9336 155.5703 31.9565 141.0811 37.0117 124.7061 c
38.9712 118.3613 41.7183 112.2568 44.0269 106.0195 c
46.5679 99.1553 51.9849 95.6152 56.0068 90.0244 c
61.124 82.9111 63.6865 75.2773 69.6001 68.4922 c
75.6968 61.499 82.125 55.5615 90.041 50.5801 c
126.2065 27.8252 170.4336 23.4268 210.4775 37.4189 c
223.002 41.7939 234.6191 47.6025 244.9971 55.9688 c
252.0571 61.6631 257.1953 69.1055 264.6313 74.3799 c
270.4204 78.4873 274.9893 81.8604 278.9302 87.8213 c
283.2803 94.4014 283.2139 100.7559 285.4492 108.2236 c
287.6792 115.6689 291.5142 121.1299 294.6787 127.9658 c
298.3721 135.9414 297.583 144.7207 297.7437 153.124 c
297.7876 155.4043 297.9043 157.6699 298.0469 159.9268 c
f
0.332555 0.661738 0.878141 0.255344 k
294.0498 164.3711 m
294.5615 172.4932 295.396 180.5049 294.2139 188.7773 c
292.9131 197.8906 288.5093 205.9014 286.9209 214.7998 c
284.4756 228.5 271.7314 236.2188 263.0698 245.8916 c
251.3257 259.0059 242.4634 271.5938 225.7129 278.6455 c
214.5361 283.3506 203.5791 290.2061 191.7495 292.9688 c
163.9595 299.4609 137.5039 293.4287 111.5181 283.375 c
74.981 269.2422 41.5562 243.1074 38.1089 200.5107 c
37.3584 191.2422 39.9653 184.2031 36.2188 175.4482 c
29.6333 160.0596 30.646 145.7158 35.6509 129.5068 c
37.5898 123.2256 40.3091 117.1816 42.5942 111.0078 c
46.3511 100.8594 55.5688 96.8418 60.2056 86.2051 c
67.2344 70.0859 81.8271 58.416 97.749 51.7207 c
113.7075 45.0078 134.0015 38.8848 151.3208 38.4727 c
177.8193 37.8418 197.1968 57.0547 222.8345 59.9072 c
229.6675 60.668 236.9829 60.5586 243.4907 63.0508 c
250.7495 65.8291 253.8169 71.6953 259.1904 77.002 c
264.5479 82.2939 273.1763 87.6729 276.894 94.2119 c
279.9355 99.5605 279.7651 107.127 281.5801 113.1904 c
283.7881 120.5615 287.583 125.9639 290.7168 132.7314 c
294.3726 140.6299 293.5913 149.3193 293.7505 157.6367 c
293.7935 159.8945 293.9097 162.1377 294.0498 164.3711 c
f
0 Ap
0.259678 0.614282 0.880491 0.112215 k
86.1997 259.7461 m
93.561 266.3027 99.04 273.4561 108.001 277.959 c
125.0933 286.5498 140.7969 279.1719 158.1733 282.2861 c
175.4053 285.376 193.7104 287.9424 210.8975 283.1777 c
218.917 280.9512 228.6704 276.5381 233.9063 269.7803 c
238.937 263.2871 239.6133 254.4277 245.7393 248.3389 c
249.9248 244.1807 255.2939 240.1914 260.3184 237.083 c
267.9292 232.376 277.1177 228.0869 282.187 220.2119 c
292.0625 204.8691 279.5854 184.3125 285.7324 167.7432 c
289.2393 158.2881 286.8589 149.3809 286.291 139.9629 c
285.7446 130.9063 283.916 125.0615 277.3032 118.3604 c
268.8804 109.8232 261.2598 105.1572 257.686 93.1523 c
253.9292 80.5342 250.0625 76.3018 237.0024 73.084 c
225.1187 70.1553 213.5659 65.6035 201.4512 63.6895 c
189.8813 61.8594 181.7109 64.2529 171.1934 67.2549 c
148.3955 73.7627 123.5381 60.5146 100.1982 64.374 c
72.7026 68.9199 61.5903 98.7295 47.0474 118.5703 c
27.5625 145.1533 43.5073 169.7285 43.0522 198.7393 c
42.8789 209.8086 43.5083 222.4775 49.126 232.3281 c
55.5938 243.6719 68.6538 248.0576 79.231 254.5078 c
81.7881 256.0674 84.0708 257.8506 86.1997 259.7461 c
f
0.222843 0.581903 0.805203 0.06424 k
114.9678 276.8916 m
122.4893 279.2725 129.0864 276.0596 136.5 275.5186 c
153.373 274.2852 169.6479 283.2051 186.7192 281.9688 c
203.9971 280.7148 216.3037 270.502 226.0972 256.7617 c
246.6191 227.9727 285.7568 221.6416 278.9863 177.8652 c
277.4863 168.1689 279.1226 153.252 272.915 145.1641 c
264.2183 133.8301 244.3745 135.2676 232.1929 130.1172 c
217.8662 124.0605 214.6816 113.0186 203.8608 103.8516 c
193.998 95.4951 180.709 96.3115 168.7896 92.7461 c
154.4004 88.4424 141.2217 78.125 125.7324 78.3701 c
114.3213 78.5518 99.0518 85.1846 89.9785 91.998 c
79.8018 99.6396 80.2109 108.0215 73.1211 118.6572 c
67.5205 127.0605 58.939 127.1006 52.4863 133.5166 c
40.6787 145.2578 48.1611 155.7617 51.5728 168.9893 c
55.3599 183.6787 50.085 194.6582 50.5039 209.2188 c
50.9136 223.4619 71.1055 235.9512 83.585 239.623 c
107.667 246.709 95.229 270.6445 114.9678 276.8916 c
f
0.176303 0.543633 0.764004 0.022583 k
220.2622 140.3027 m
236.9473 139.8594 236.3164 154.5645 246.7896 162.8896 c
259.8506 173.2734 272.6602 185.4814 263.7563 203.499 c
258.6475 213.8359 249.2671 221.3594 241.8442 229.9346 c
235.0059 237.834 230.5181 246.8672 224.8872 255.5723 c
210.5786 277.6914 191.1128 281.5879 166.8867 274.959 c
156.9829 272.25 148.0332 270.7793 137.7754 272.2246 c
131.1255 273.1602 122.1064 276.8555 116.1675 272.1377 c
109.9858 267.2256 109.1226 255.1064 105.4849 248.4063 c
101.0278 240.1953 93.8564 233.8525 86.0923 228.8379 c
79.8579 224.8115 69.459 224.0684 67.4434 215.5967 c
66.5508 211.8486 69.7554 209.8125 69.8179 206.623 c
69.8833 203.2598 67.8301 199.668 66.9028 196.4551 c
64.6265 188.5723 62.855 179.9941 66.1162 172.1035 c
68.9277 165.2988 71.8105 162.0195 72.4473 154.3184 c
73.6831 139.3555 77.2246 126.0654 89.501 116.1113 c
104.6841 103.7979 125.5688 103.4092 141.2095 115.0146 c
152.8916 123.6826 159.7466 141.0986 174.4102 145.2305 c
189.3818 149.4492 205.2788 140.7002 220.2622 140.3027 c
f
0.056519 0.152071 0.393683 0.000031 k
57.2681 75.1797 m
47.9292 89.4766 43.3345 107.7783 45.1162 124.8398 c
46.5366 138.4346 54.814 152.3135 53.5781 166.0664 c
51.5273 188.8838 47.002 209.9902 59.0059 230.8584 c
68.8843 248.0332 81.4448 262.7471 101.98 266.0107 c
122.2739 269.2363 137.8862 272.5781 156.9028 280.8945 c
177.7686 290.0186 198.5693 290.5938 219.2192 279.9482 c
237.1084 270.7256 238.2593 257.2383 249.0127 242.667 c
255.9463 233.2734 268.0903 228.5498 275.3491 219.3887 c
283.3579 209.2813 284.5239 195.6514 286.4629 183.2979 c
290.4487 157.8994 291.5576 125.6328 278.4399 102.4219 c
265.8101 80.0732 238.9731 73.4717 215.8447 67.8799 c
189.6748 61.5518 163.8359 52.7988 137.5376 47.2393 c
106.4751 40.6738 75.5684 47.1572 57.2681 75.1797 c
f
0.027375 0.086183 0.242741 0.000031 k
58.4341 81.1729 m
49.3452 95.0869 44.8735 112.8994 46.6079 129.5029 c
47.9902 142.7334 56.0454 156.2402 54.8428 169.624 c
52.8472 191.8291 48.4429 212.3691 60.125 232.6777 c
69.7393 249.3945 81.9629 263.7139 101.9463 266.8887 c
121.6968 270.0293 136.8901 273.2793 155.3975 281.374 c
175.7036 290.252 195.9453 290.8125 216.042 280.4512 c
233.4521 271.4766 234.5718 258.3496 245.0381 244.1709 c
251.7856 235.0283 263.6035 230.4326 270.668 221.5146 c
278.4619 211.6787 279.5967 198.4141 281.4834 186.3926 c
285.3623 161.6758 286.4409 130.2734 273.6758 107.6846 c
261.3838 85.9355 235.2666 79.5117 212.7588 74.0703 c
187.2905 67.9111 162.145 59.3936 136.5513 53.9844 c
106.3218 47.5938 76.2437 53.9023 58.4341 81.1729 c
f
0.001099 0.037751 0.130495 0.000031 k
231.3931 257.6377 m
247.7207 241.8818 241.9229 227.8076 245.8179 208.6348 c
249.2715 191.6377 264.3447 179.5039 268.4712 162.6777 c
276.2212 131.0742 243.9478 127.8672 220.3896 125.5381 c
187.6021 122.2949 169.5791 113.208 146.7207 89.8604 c
128.5576 71.3086 108.8496 61.1475 85.6738 78.9258 c
57.9028 100.2295 64.5459 134.9951 63.4731 165.6885 c
63.0151 178.7686 60.8438 190.8613 58.6436 203.6758 c
53.8691 231.4883 82.0103 261.2617 108.9824 263.4258 c
118.9814 264.2285 127.3423 260.1367 137.3281 262.5537 c
156.2803 267.1436 162.3506 282.8975 183.7656 280.7861 c
201.4355 279.0459 218.7319 269.8545 231.3931 257.6377 c
f
0.056519 0.152071 0.393683 0.000031 k
190.4131 241.3457 m
187.9595 239.3857 189.8403 235.5479 192.8867 236.4912 c
196.4224 237.5859 194.4385 244.5508 190.4131 241.3457 c
f
254.8325 230.3311 m
250.9155 229.9951 249.9482 224.2129 253.6943 222.7656 c
259.1729 220.6514 262.2329 230.9629 254.8325 230.3311 c
f
86.8911 70.292 m
82.7393 69.9043 80.7588 64.6035 84.9795 62.7539 c
90.8823 60.1699 95.3999 71.0879 86.8911 70.292 c
f
0.027375 0.086183 0.242741 0.000031 k
263.1235 153.9531 m
264.4551 156.9072 264.7485 160.3203 263.6069 163.4229 c
262.7119 165.8574 259.6973 170.2471 257.04 171.0518 c
249.2383 173.4121 240.1309 171.7393 235.6421 164.3281 c
229.5571 154.2842 247.6484 144.2705 255.6641 146.9775 c
259.0332 148.1152 261.6846 150.7656 263.1235 153.9531 c
f
232.1333 152.4434 m
226.6201 152.2607 222.4937 145.7285 228.8809 142.96 c
236.6108 139.6104 242.5996 152.7891 232.1333 152.4434 c
f
0 0 0 0 k
111.7588 255.7617 m
107.6616 255.6289 104.5952 250.7725 109.3423 248.7148 c
115.0864 246.2246 119.5361 256.0186 111.7588 255.7617 c
f
99.2778 253.8027 m
97.3364 253.7363 95.8818 251.4375 98.1328 250.4629 c
100.855 249.2822 102.9629 253.9238 99.2778 253.8027 c
f
0.056519 0.152071 0.393683 0.000031 k
222.728 189.9756 m
240.457 152.4971 186.4458 121.9473 152.748 107.502 C
128.4795 129.5518 88.9521 183.3545 116.897 206.6084 c
134.6958 221.4141 156.9346 211.1748 167.0034 191.5527 C
184.063 211.4248 211.3726 213.9785 222.728 189.9756 c
f
0.000031 0.919585 0.825986 0.22 k
221.8403 194.4111 m
239.5693 156.9346 185.5581 126.3857 151.8613 111.9385 C
127.5928 133.9893 88.0649 187.793 116.0088 211.0449 c
133.8086 225.8516 156.0474 215.6113 166.1157 195.9883 C
183.1753 215.8623 210.4849 218.415 221.8403 194.4111 c
f
0.000031 0.919585 0.825986 0.000031 k
217.2173 195.6914 m
233.8413 160.5488 183.1963 131.9033 151.5986 118.3584 C
128.8423 139.0342 91.7783 189.4854 117.9805 211.2881 c
134.6704 225.1719 155.5244 215.5703 164.9653 197.1709 C
180.9614 215.8047 206.5688 218.2002 217.2173 195.6914 c
f
U
u
u
1 Ap
0.36817 0.755611 1 0.450599 k
632.8438 498.6406 m
633.3604 506.8467 634.2021 514.9385 633.0088 523.2974 c
630.9727 537.5645 623.3457 561.4351 614.4023 572.6738 c
605.4111 583.9761 592.3389 594.2939 581.7539 604.2686 c
569.9336 615.4097 545.3213 624.8545 529.499 628.5508 c
501.4248 635.1074 474.7012 629.0142 448.4487 618.8594 c
439.9951 615.5903 430.3569 613.3345 423.0703 608.0718 c
412.0313 600.1006 405.1982 585.4194 395.5713 575.7764 c
382.7109 562.8955 375.8467 554.3755 374.292 535.1514 c
373.5342 525.7871 376.167 518.6782 372.3818 509.8315 c
365.7305 494.2852 366.7524 479.7949 371.8086 463.4209 c
381.5439 431.8809 398.6777 403.5059 426.8691 385.4336 c
437.8638 378.3838 453.1304 379.1631 466.2178 377.0752 c
496.249 372.2861 520.1436 360.1914 549.9893 373.6602 c
575.8447 385.3271 601.2393 402.667 615.5107 427.7686 c
618.585 433.1709 618.4121 440.8135 620.2461 446.9395 c
622.4756 454.3848 626.3096 459.8428 629.4766 466.6807 c
633.1689 474.6582 632.3799 483.4355 632.5391 491.8389 c
632.584 494.1201 632.7021 496.3838 632.8438 498.6406 c
f
0.332555 0.661738 0.878141 0.255344 k
628.8467 503.0869 m
629.3584 511.208 630.1924 519.2183 629.0098 527.4922 c
627.709 536.6055 623.3057 544.6162 621.7178 553.5156 c
618.1982 573.2275 592.3975 588.2734 580.6426 603.5405 c
548.5693 645.1992 470.6045 637.1304 428.2954 616.9209 c
415.4766 610.7983 411.2354 601.0508 402.8027 590.3672 c
394.957 580.4248 383.2104 573.6392 376.6167 562.7627 c
367.6729 548.0093 370.5898 528.7856 368.7314 512.3379 c
366.979 496.8311 365.6987 483.6055 370.4478 468.2197 c
372.3857 461.9404 375.1045 455.8994 377.3887 449.7275 c
382.8535 434.9688 401.0757 414.6328 413.9336 405.7861 c
429.9268 394.7813 449.5874 390.9854 467.9648 385.8438 c
482.5015 381.7773 496.2734 374.5605 511.7842 375.9336 c
529.7061 377.5195 545.8574 389.04 562.5693 394.9932 c
582.0098 401.9189 601.292 414.6338 611.6904 432.9277 c
614.7314 438.2773 614.5615 445.8428 616.376 451.9063 c
618.584 459.2773 622.3789 464.6787 625.5137 471.4473 c
629.1699 479.3447 628.3887 488.0352 628.5469 496.3516 c
628.5898 498.6104 628.707 500.853 628.8467 503.0869 c
f
0 Ap
0.259678 0.614282 0.880491 0.112215 k
416.8018 602.9683 m
428.3735 614.2378 440.7759 621.5029 457.4224 622.2471 c
474.7021 623.019 491.23 626.8818 508.3457 628.2866 c
524.5225 629.6143 540.7881 620.6934 554.5 613.0273 c
565.6094 606.8164 571.2256 598.9365 578.6768 589.0332 c
587.6943 577.0459 603.0674 572.5347 612.4551 561.0737 c
622.4219 548.9028 625.3125 535.8179 621.0781 520.7847 c
617.7822 509.085 620.7676 498.5801 620.9941 486.9004 c
621.1943 476.5615 618.1406 464.9648 613.6113 455.7441 c
606.1045 440.4648 591.9941 435.583 577.4453 428.7617 c
558.2178 419.748 546.1514 405.1621 529.7773 392.4756 c
501.3926 370.4873 469.9072 391.4326 440.2065 399.2832 c
417.5518 405.2715 405.0488 413.5371 396.1826 435.6074 c
388.2324 455.3945 368.6919 471.9609 371.9023 494.7314 c
373.9976 509.5894 377.2544 523.9194 377.2251 538.9976 c
377.2012 551.54 375.5005 561.439 386.5396 570.0269 c
396.6963 577.9263 403.5303 586.0161 411.0835 596.395 c
412.7944 598.7441 414.7139 600.9351 416.8018 602.9683 c
f
0.222843 0.581903 0.805203 0.06424 k
449.5737 617.0713 m
463.3784 620.6968 475.1558 620.3398 488.7451 619.9922 c
503.2754 619.6206 517.2988 627.3892 531.6309 621.4878 c
538.9189 618.4873 545.8271 613.2749 550.6836 607.0015 c
558.4346 596.9839 561.9531 587.7573 572.0596 579.082 c
583.624 569.1563 604.3242 564.6914 610.3535 549.3145 c
617.9209 530.0171 610.1504 504.7441 610.3994 484.7686 c
610.5205 475.1553 612.4141 463.4697 601.6768 457.5088 c
594.292 453.4102 584.9375 455.3848 577.1338 452.0186 c
569.7969 448.8584 564.374 442.6035 557.458 438.7451 c
543.8818 431.1689 528.0039 427.5547 513.8643 421.123 c
502.3643 415.8896 489.46 409.2686 476.5249 409.6152 c
465.0239 409.9248 456.2427 415.9326 446.0815 420.3203 c
424.3369 429.7061 407.0791 441.8428 395.415 463.2422 c
389.1147 474.8018 380.0703 481.5293 379.0591 495.6084 c
378.1631 508.0884 382.4858 520.458 383.5464 532.8096 c
384.5371 544.3291 383.9102 557.5522 390.063 567.8213 c
396.2354 578.1211 408.2402 581.6675 416.4272 589.8721 c
428.6294 602.0996 431.5527 612.3369 449.5737 617.0713 c
f
0.176303 0.543633 0.764004 0.022583 k
575.3682 573.3804 m
571.0869 576.9165 566.9697 579.7925 563.5732 581.6914 c
557.1885 585.2646 550.4443 589.1328 546.0742 595.1816 c
542.333 600.3608 540.9131 607.2539 536.8926 612.188 c
528.2217 622.8257 510.3418 619.4663 498.959 616.3516 c
478.9229 610.8701 453.1802 622.4639 443.7056 598.7861 c
439.5981 588.522 435.1572 585.2324 425.2593 580.7124 c
363.5181 552.5146 384.2544 457.4941 439.1802 435.1016 c
453.9951 429.0615 461.5376 434.8262 472.2778 444.7744 c
485.668 457.1758 498.4111 462.8438 516.9541 462.7617 c
529.9775 462.7021 549.0693 456.6328 560.2578 465.7803 c
568.9746 472.9072 571.2188 487.4863 577.9658 496.4619 c
585.5088 506.4951 600.5117 514.6436 602.9971 527.748 c
605.7813 542.4282 589.6611 561.5781 575.3682 573.3804 c
f
0.222843 0.581903 0.805203 0.06424 k
569.9688 546.7231 m
565.7705 543.3696 568.9893 536.8032 574.2031 538.4189 c
580.2539 540.292 576.8594 552.2085 569.9688 546.7231 c
f
411.0972 529.9346 m
408.6011 527.9399 410.5151 524.0352 413.6157 524.9951 c
417.2139 526.1099 415.1943 533.1963 411.0972 529.9346 c
f
557.1172 542.3091 m
554.6191 540.3164 556.5342 536.4102 559.6348 537.3711 c
563.2324 538.4839 561.2129 545.5703 557.1172 542.3091 c
f
478.519 607.5254 m
476.0225 605.5317 477.9365 601.6265 481.0371 602.5874 c
484.6348 603.7007 482.6162 610.7871 478.519 607.5254 c
f
503.2832 574.1611 m
500.7856 572.1675 502.6992 568.2627 505.8008 569.2231 c
509.3984 570.3364 507.3789 577.4233 503.2832 574.1611 c
f
0.259678 0.614282 0.880491 0.112215 k
462.373 475.5654 m
458.3867 475.2246 457.4023 469.3389 461.2139 467.8682 c
466.79 465.7148 469.9053 476.21 462.373 475.5654 c
f
594.8271 527.8325 m
591.8369 527.5776 591.0977 523.1616 593.957 522.0566 c
598.1396 520.4409 600.4795 528.3159 594.8271 527.8325 c
f
543.625 443.5186 m
540.6338 443.2646 539.8965 438.8477 542.7559 437.7432 c
546.9395 436.1279 549.2764 444.0029 543.625 443.5186 c
f
0.332555 0.661738 0.878141 0.255344 k
415.2573 428.9922 m
411.0317 428.5977 409.0166 423.2041 413.312 421.3223 c
419.3193 418.6924 423.917 429.8018 415.2573 428.9922 c
f
0.222843 0.581903 0.805203 0.06424 k
529.1494 609.2524 m
523.0537 618.21 499.7329 605.7876 507.957 589.2793 c
511.2158 582.7393 520.7178 571.7432 526.1484 582.9712 c
527.9082 586.6104 526.8018 590.2759 527.3223 594.0972 c
527.8232 597.7725 530.8721 601.5464 530.5029 605.2251 c
530.335 606.8755 529.8604 608.2085 529.1494 609.2524 c
f
/BBAccumRotation (0.934836) XT
569.2217 492.4395 m
564.8154 499.6143 553.8066 500.3188 546.9082 496.8164 c
536.2412 491.4004 542.5674 479.3701 550.665 475.0566 c
559.6514 470.2656 575.5264 482.168 569.2217 492.4395 c
f
421.0044 491.4404 m
417.3281 497.4248 408.147 498.0137 402.3926 495.0918 c
393.4941 490.5742 398.7715 480.54 405.5249 476.9414 c
413.0205 472.9463 426.2632 482.873 421.0044 491.4404 c
f
0.332555 0.661738 0.878141 0.255344 k
506.3555 392.4756 m
510.3926 393.5156 513.8604 397.1719 512.0049 401.9551 c
508.8711 410.0381 495.5942 406.1982 497.4634 397.3984 c
498.4463 392.7725 502.6426 391.5166 506.3555 392.4756 c
f
0.072755 0.38764 0.658961 0.000031 k
466.0142 434.0654 m
460.4038 433.8789 456.2031 427.2305 462.7046 424.4131 c
470.5703 421.0039 476.6665 434.417 466.0142 434.0654 c
f
475.1685 441.5742 m
471.3892 441.4482 468.5591 436.9688 472.9385 435.0713 c
478.2383 432.7744 482.3442 441.8105 475.1685 441.5742 c
f
U
u
0.259678 0.614282 0.880491 0.112215 k
472.1108 580.9927 m
474.0903 577.8486 471.6885 573.3237 471.2148 570.1611 c
470.7788 567.252 469.978 564.6553 466.8608 563.6865 c
460.1182 561.5928 450.8931 565.2852 447.7139 571.6069 c
445.312 576.3799 448.7632 585.3125 454.6089 585.7275 c
458.1157 585.9751 470.063 584.2378 472.1108 580.9927 c
f
0.36817 0.755611 1 0.450599 k
467.6055 583.1396 m
469.4302 580.2417 467.2163 576.0723 466.7808 573.1572 c
466.3784 570.4756 465.6401 568.0825 462.7676 567.1899 c
456.5527 565.2598 448.0498 568.6631 445.1201 574.4897 c
442.9067 578.8882 446.0874 587.1211 451.4746 587.5039 c
454.7065 587.7329 465.7178 586.1309 467.6055 583.1396 c
f
0.056519 0.152071 0.393683 0.000031 k
466.7178 584.9146 m
468.543 582.0171 466.3291 577.8472 465.8926 574.9316 c
465.4907 572.2505 464.7524 569.8569 461.8794 568.9644 c
455.666 567.0347 447.1621 570.438 444.2324 576.2646 c
442.019 580.6636 445.1992 588.897 450.5879 589.2778 c
453.8188 589.5068 464.8301 587.9063 466.7178 584.9146 c
f
0.001099 0.037751 0.130495 0.000031 k
464.8413 585.6689 m
467.3081 581.7495 462.9517 574.6445 459.9272 572.1846 c
455.397 568.502 451.9077 570.8086 447.2153 572.9502 c
440.8105 575.8735 440.8384 590.4883 448.813 591.0537 c
452.0444 591.2822 462.9536 588.6597 464.8413 585.6689 c
f
0.332555 0.661738 0.878141 0.255344 k
581.1123 432.6621 m
583.9482 428.1572 580.5068 421.6748 579.8301 417.1455 c
579.2051 412.9775 578.0566 409.2559 573.5918 407.8682 c
563.9326 404.8691 550.7139 410.1592 546.1602 419.2168 c
542.7197 426.0547 547.6641 438.8506 556.0391 439.4443 c
561.0615 439.8018 578.1777 437.3135 581.1123 432.6621 c
f
0.36817 0.755611 1 0.450599 k
580.0176 433.2842 m
582.627 429.1377 579.46 423.1719 578.8359 419.001 c
578.2627 415.165 577.2051 411.7412 573.0957 410.4639 c
564.2051 407.7021 552.0381 412.5713 547.8457 420.9072 c
544.6807 427.2021 549.2295 438.9805 556.9395 439.5283 c
561.5625 439.8555 577.3154 437.5645 580.0176 433.2842 c
f
0.056519 0.152071 0.393683 0.000031 k
578.2412 435.0576 m
580.8535 430.9121 577.6865 424.9473 577.0615 420.7773 c
576.4873 416.9395 575.4297 413.5156 571.3213 412.2383 c
562.4297 409.4785 550.2637 414.3457 546.0713 422.6836 c
542.9053 428.9756 547.4551 440.7559 555.165 441.3027 c
559.7871 441.6299 575.542 439.3398 578.2412 435.0576 c
f
0.001099 0.037751 0.130495 0.000031 k
575.5566 436.1387 m
579.0859 430.5313 572.8545 420.3643 568.5264 416.8447 c
562.0449 411.5771 557.0537 414.876 550.3398 417.9414 c
541.1748 422.123 541.2168 443.0332 552.625 443.8418 c
557.248 444.1699 572.8574 440.417 575.5566 436.1387 c
f
0.222843 0.581903 0.805203 0.06424 k
431.8662 508.521 m
428.6616 511.1294 433.9277 517.9014 433.5586 521.7793 c
433.1929 525.6182 428.8081 529.9917 433.4673 532.4219 c
437.2241 534.3774 442.5015 537.7188 449.9175 533.002 c
456.8477 528.5952 453.4336 512.8271 449.1851 507.7188 c
444.9639 502.644 437.0664 504.2891 431.8662 508.521 c
f
0.36817 0.755611 1 0.450599 k
431.7402 511.7983 m
428.9258 514.0889 433.5503 520.0352 433.2266 523.4404 c
432.9043 526.8115 429.0542 530.6523 433.1455 532.7852 c
436.4443 534.5034 441.0791 537.437 447.5913 533.2954 c
453.6763 529.4258 450.6782 515.5786 446.9473 511.0933 c
443.2407 506.6377 436.3062 508.0815 431.7402 511.7983 c
f
0.056519 0.152071 0.393683 0.000031 k
429.9653 514.46 m
427.1514 516.7505 431.7759 522.6968 431.4512 526.1025 c
431.1299 529.4736 427.2803 533.3145 431.3706 535.4478 c
434.6704 537.165 439.3037 540.0991 445.8169 535.9575 c
451.9014 532.0879 448.9033 518.2417 445.1729 513.7554 c
441.4668 509.3003 434.5317 510.7437 429.9653 514.46 c
f
0.001099 0.037751 0.130495 0.000031 k
427.3032 516.2354 m
424.4897 518.5254 429.1133 524.4717 428.7896 527.8774 c
428.4678 531.248 424.6177 535.0889 428.7085 537.2217 c
432.0078 538.9395 441.7207 539.2339 444.8447 536.8755 c
450.5996 532.5303 446.2417 520.0161 442.5103 515.5308 c
438.8042 511.0742 431.8696 512.5181 427.3032 516.2354 c
f
0.222843 0.581903 0.805203 0.06424 k
510.9521 487.7373 m
512.5137 482.8115 509.5771 470.4082 505.8486 466.9746 c
500.0747 461.6602 475.6992 463.251 475.1987 466.2139 c
473.6597 475.3164 477.4697 487.4209 487.1479 492.1279 c
492.6792 494.8203 508.9541 494.0391 510.9521 487.7373 c
f
0.332555 0.661738 0.878141 0.255344 k
506.6367 491.0176 m
508.1973 486.0918 505.2607 473.6875 501.5332 470.2549 c
495.7593 464.9414 471.3833 466.5303 470.8838 469.4941 c
469.3442 478.5957 473.1538 490.7021 482.832 495.4082 c
488.3638 498.0996 504.6387 497.3193 506.6367 491.0176 c
f
0.027375 0.086183 0.242741 0.000031 k
504.8623 494.5684 m
506.4229 489.6416 503.4863 477.2373 499.7573 473.8047 c
493.9844 468.4893 469.6089 470.0801 469.1079 473.0439 c
467.5698 482.1465 471.3794 494.252 481.0581 498.957 c
486.5894 501.6489 502.8643 500.8682 504.8623 494.5684 c
f
0.056519 0.152071 0.393683 0.000031 k
504.8623 494.5684 m
506.4229 489.6416 503.4863 477.2373 499.7573 473.8047 c
493.9844 468.4893 479.6753 480.0469 477.9629 482.5176 c
475.2734 486.3994 471.3794 494.252 481.0581 498.957 c
486.5894 501.6489 502.8643 500.8682 504.8623 494.5684 c
f
0.001099 0.037751 0.130495 0.000031 k
500.0845 495.8389 m
501.6445 490.9111 498.481 478.7373 494.9795 475.0732 c
491.7192 471.6602 469.6089 470.0801 469.1079 473.0439 c
467.5698 482.1465 467.0327 494.1943 476.7109 498.9014 c
482.2422 501.5918 498.0854 502.1387 500.0845 495.8389 c
f
0.259678 0.614282 0.880491 0.112215 k
413.5391 455.1182 m
408.8574 452.2852 401.3633 461.4521 400.2651 465.7285 C
404.2471 470.876 410.7808 480.6992 413.8574 479.7676 c
416.8179 478.8682 418.6602 473.8086 420.043 471.3115 c
422.3091 467.2188 422.0928 463.8633 419.2339 460.2559 c
418.7886 459.6943 415.9634 456.5898 413.5391 455.1182 c
f
0.376135 0.694606 0.967925 0.390723 k
413.5391 457.7813 m
408.8574 454.9473 401.3633 464.1133 400.2651 468.3896 C
404.2471 473.5371 410.7808 483.3613 413.8574 482.4287 c
416.8179 481.5293 418.6602 476.4717 420.043 473.9727 c
422.3091 469.8818 422.0928 466.5244 419.2339 462.9189 c
418.7886 462.3574 415.9634 459.252 413.5391 457.7813 c
f
0.433814 0.796536 0.845457 0.663325 k
413.5391 457.7813 m
408.8574 454.9473 404.5835 483.8809 413.8574 482.4287 c
416.9146 481.9502 418.6602 476.4717 420.043 473.9727 c
422.3091 469.8818 422.0928 466.5244 419.2339 462.9189 c
418.7886 462.3574 415.9634 459.252 413.5391 457.7813 c
f
0.332555 0.661738 0.878141 0.255344 k
412.0742 458.166 m
410.9683 456.9434 400.2744 465.5449 400.2651 468.3896 c
400.2524 472.792 408.3086 483.208 413.2769 482.3174 c
414.4839 482.1025 417.4282 476.377 418.2676 474.8623 c
422.7158 466.833 417.5894 464.252 412.0742 458.166 c
f
0.259678 0.614282 0.880491 0.112215 k
575.6904 556.3862 m
575.7676 559.1841 576.6543 562.0229 578.3887 564.3672 c
584.3223 572.3926 606.6904 567.9072 604.5342 556.415 c
603.6924 551.916 591.2051 544.3071 586.6924 544.2539 c
579.3281 544.1675 575.5166 550.1729 575.6904 556.3862 c
f
0.36817 0.755611 1 0.450599 k
574.8711 558.1567 m
578.6855 565.999 581.0615 573.9316 591.8887 570.0859 c
599.8496 567.2578 602.0879 567.3301 597.5371 557.9189 c
595.6826 554.0825 593.4473 548.0229 588.3604 547.6904 c
582.8066 547.3276 579.2686 555.6748 574.8711 558.1567 C
f
0.056519 0.152071 0.393683 0.000031 k
572.7783 559.9307 m
576.5928 567.7739 578.9688 575.7061 589.7969 571.8608 c
597.7568 569.0322 599.9941 569.105 595.4434 559.6943 c
593.5898 555.8564 591.3545 549.7979 586.2666 549.4653 c
580.7148 549.103 577.1748 557.4497 572.7783 559.9307 C
f
0.001099 0.037751 0.130495 0.000031 k
570.665 561.5342 m
574.4785 569.377 575.6123 577.2642 586.4375 573.4189 c
594.3994 570.5903 597.333 571.7671 592.7822 562.3564 c
590.9277 558.519 588.6924 552.46 583.6055 552.1274 c
578.0518 551.7651 575.0605 559.0527 570.665 561.5342 C
f
0.222843 0.581903 0.805203 0.06424 k
517.1777 524.9302 m
516.9316 524.8101 516.6865 524.7095 516.4365 524.6343 c
513.4512 523.7266 504.8457 526.9058 501.9453 528.3066 c
492.2559 532.9858 496.0952 542.2861 505.5752 544.9951 c
511.3076 546.6338 521.9453 548.1733 523.8789 540.6108 c
524.998 536.2324 521.5684 527.1045 517.1777 524.9302 c
f
0.36817 0.755611 1 0.450599 k
514.6445 527.7607 m
507.9609 528.979 493.936 536.1055 y
496.4038 541.8306 497.998 543.4453 504.5137 545.3076 c
506.0439 545.7451 518.9375 547.6191 519.3262 544.6753 c
519.9688 539.7949 517.0684 532.6997 514.6445 527.7607 C
f
0.433814 0.796536 0.845457 0.663325 k
512.8701 530.4224 m
506.1855 531.6406 492.1611 538.7676 y
494.6289 544.4927 496.2241 546.1069 502.7393 547.9692 c
504.2695 548.4072 517.1641 550.2813 517.5518 547.3374 c
518.1943 542.457 515.292 535.3618 512.8701 530.4224 C
f
0.533043 0.761166 0.73666 0.777951 k
512.8701 530.4224 m
509.9805 536.1138 508.877 541.3833 y
511.3447 547.1089 517.1641 550.2813 517.5518 547.3374 c
518.1943 542.457 515.292 535.3618 512.8701 530.4224 C
f
0.376135 0.694606 0.967925 0.390723 k
511.6787 532.8096 m
510.3223 533.3833 492.1421 538.7251 492.1611 538.7676 c
494.6289 544.4927 495.3359 547.8818 501.8506 549.7441 c
503.3818 550.1816 518.3652 550.1934 517.5518 547.3374 c
516.1768 542.5122 513.8418 537.2163 511.6787 532.8096 C
f
0.259678 0.614282 0.880491 0.112215 k
416.2217 549.5342 m
411.7886 548.9419 401.5635 550.5576 y
401.9482 554.6426 402.6187 555.9766 406.3188 558.4634 c
407.1885 559.0483 414.8799 562.8369 415.7197 561.0728 c
417.1133 558.1479 416.7354 553.1177 416.2217 549.5342 C
f
/BBAccumRotation (0.313336) XT
0.433814 0.796536 0.845457 0.663325 k
415.334 551.3091 m
410.9014 550.7168 400.6758 552.332 y
401.061 556.4175 401.7305 557.7515 405.4321 560.2383 c
406.3008 560.8232 413.9927 564.6118 414.8325 562.8477 c
416.2256 559.9229 415.8486 554.8921 415.334 551.3091 C
f
/BBAccumRotation (0.313336) XT
0.533043 0.761166 0.73666 0.777951 k
415.334 551.3091 m
412.3711 554.2861 410.6108 557.3604 y
410.9941 561.4453 413.9927 564.6118 414.8325 562.8477 c
416.2256 559.9229 415.8486 554.8921 415.334 551.3091 C
f
/BBAccumRotation (0.313336) XT
0.376135 0.694606 0.967925 0.390723 k
414.1035 552.5615 m
413.1387 552.6465 400.6733 552.3022 400.6758 552.332 c
401.061 556.4175 400.8154 558.6831 404.5161 561.1699 c
405.3862 561.7539 414.7632 564.8003 414.8325 562.8477 c
414.9526 559.5488 414.5635 555.7598 414.1035 552.5615 C
f
/BBAccumRotation (0.313336) XT
0.222843 0.581903 0.805203 0.06424 k
537.0742 562.3286 m
520.2969 557.2471 530.0469 589.2026 543.0781 588.2231 c
545.0215 588.0767 551.998 582.2871 551.998 578.6929 c
551.998 576.8228 538.7949 562.8501 537.0742 562.3286 c
f
0.36817 0.755611 1 0.450599 k
537.0127 568.0439 m
523.5781 563.9751 531.3848 589.5645 541.8193 588.7808 c
543.376 588.6631 548.9629 584.0273 548.9629 581.1484 c
548.9629 579.6514 538.3916 568.4619 537.0127 568.0439 c
f
0.433814 0.796536 0.845457 0.663325 k
535.2363 568.9316 m
521.8047 564.8623 529.6094 590.4526 540.0439 589.668 c
541.6016 589.5503 547.1885 584.9146 547.1885 582.0356 c
547.1885 580.5386 536.6172 569.3491 535.2363 568.9316 c
f
0.332555 0.661738 0.878141 0.255344 k
534.3506 570.7061 m
520.915 566.6367 529.6094 590.4526 540.0439 589.668 c
541.6016 589.5503 546.2598 585.2749 546.3008 583.8101 c
546.3428 582.313 535.7295 571.124 534.3506 570.7061 c
f
440.2026 428.1953 m
428.73 428.8301 441.9082 446.3232 449.7124 442.793 c
450.8779 442.2676 453.874 437.1348 453.0659 434.9209 c
452.647 433.7705 441.3813 428.1279 440.2026 428.1953 c
f
0.433814 0.796536 0.845457 0.663325 k
438.4282 429.9688 m
426.9556 430.6045 440.1338 448.0967 447.938 444.5684 c
449.1035 444.043 452.0991 438.9111 451.291 436.6973 c
450.8716 435.5459 439.6074 429.9043 438.4282 429.9688 c
f
0.332555 0.661738 0.878141 0.255344 k
438.2441 431.583 m
426.7715 432.2188 440.1338 448.0967 447.938 444.5684 c
449.1035 444.043 451.4873 439.4473 451.1079 438.3096 c
450.7192 437.1465 439.4214 431.5186 438.2441 431.583 c
f
0.259678 0.614282 0.880491 0.112215 k
516.9893 431.6543 m
510.1133 429.8477 498.9453 430.8398 498.7271 438.207 c
498.1992 456.1719 538.3643 444.8809 520.6953 433.1836 c
519.7646 432.5664 518.4775 432.0439 516.9893 431.6543 c
f
0.332555 0.661738 0.878141 0.255344 k
514.9141 433.7002 m
515.1104 434.2813 500.7876 436.8555 499.4238 437.374 C
498.2642 439.958 l
510.209 450.0781 514.9111 447.8115 v
522.8418 443.9932 517.3701 440.9785 514.9141 433.7002 C
f
0.433814 0.796536 0.845457 0.663325 k
514.0273 435.4746 m
514.2227 436.0557 499.9004 438.6299 498.5361 439.1484 C
497.3765 441.7334 l
509.3213 451.8525 514.0244 449.5869 v
521.9551 445.7666 516.4824 442.7539 514.0273 435.4746 C
f
0.533043 0.761166 0.73666 0.777951 k
514.0273 435.4746 m
514.2227 436.0557 507.2021 441.7998 505.8398 442.3184 C
509.3213 451.8525 514.0244 449.5869 v
521.9551 445.7666 516.4824 442.7539 514.0273 435.4746 C
f
0.376135 0.694606 0.967925 0.390723 k
511.3633 438.1367 m
511.5615 438.7188 498.7393 441.2158 497.3765 441.7334 C
495.7061 449.7773 504.708 454.4004 511.2422 451.2529 c
519.1729 447.4326 513.8203 445.415 511.3633 438.1367 C
f
0.222843 0.581903 0.805203 0.06424 k
555.4316 513.0488 m
551.9268 509.7988 539.6387 508.6172 542.5771 516.2939 c
545.7695 524.6338 560.707 520.8374 555.9834 513.686 c
555.8389 513.4663 555.6533 513.2529 555.4316 513.0488 c
f
/BBAccumRotation (0.451426) XT
0.332555 0.661738 0.878141 0.255344 k
554.6357 514.7158 m
554.5811 515.1421 544.7861 512.3926 543.7695 512.3027 C
542.252 513.5762 l
546.6797 523.585 550.3281 523.5947 v
556.4844 523.6104 553.9619 520.0459 554.6357 514.7158 C
f
/BBAccumRotation (0.451426) XT
0.433814 0.796536 0.845457 0.663325 k
553.749 515.603 m
553.6953 516.0293 543.8984 513.2803 542.8818 513.1899 C
541.3633 514.4639 l
545.793 524.4731 549.4424 524.4824 v
555.5967 524.4976 553.0732 520.9326 553.749 515.603 C
f
/BBAccumRotation (0.451426) XT
0.533043 0.761166 0.73666 0.777951 k
553.749 515.603 m
553.6953 516.0293 547.5254 517.5015 546.5098 517.4116 C
545.793 524.4731 549.4424 524.4824 v
555.5967 524.4976 553.0732 520.9326 553.749 515.603 C
f
/BBAccumRotation (0.451426) XT
0.376135 0.694606 0.967925 0.390723 k
551.2617 516.4663 m
551.209 516.8916 542.377 514.5532 541.3633 514.4639 C
537.8594 519.0137 542.1123 524.6694 547.1816 524.6821 c
553.3389 524.6973 550.5869 521.7949 551.2617 516.4663 C
f
/BBAccumRotation (0.451426) XT
0.259678 0.614282 0.880491 0.112215 k
610.4248 507.8403 m
615.7949 504.9443 618.8477 497.9141 616.9561 491.8213 c
613.7451 481.4805 602.4805 488.209 596.4307 492.8916 c
589.042 498.6055 596.2334 507.9458 603.3027 509.0527 c
605.9229 509.4629 608.3467 508.9609 610.4248 507.8403 c
f
0.36817 0.755611 1 0.450599 k
609.3926 508.4688 m
615.6406 504.4385 612.1182 495.2119 609.5439 490.041 C
603.0352 491.3506 596.7949 495.9199 591.6895 500.6523 C
595.2734 506.9775 599.959 514.5532 609.3926 508.4688 c
f
0.433814 0.796536 0.845457 0.663325 k
608.5059 510.2432 m
614.7529 506.2139 611.2314 496.9883 608.6563 491.8154 C
602.1484 493.127 595.9082 497.6953 590.8027 502.4263 C
594.3857 508.7524 599.0723 516.3276 608.5059 510.2432 c
f
0.376135 0.694606 0.967925 0.390723 k
607.6172 512.0186 m
613.8652 507.9878 610.3438 498.7627 607.7705 493.5898 C
601.2617 494.9014 597.0674 500.9131 590.8027 502.4263 C
594.3857 508.7524 598.1836 518.1025 607.6172 512.0186 c
f
U
U
u
u
1 Ap
0.36817 0.755611 1 0.450599 k
967.6406 159.9268 m
968.1553 168.1318 968.999 176.2236 967.8057 184.582 c
966.4893 193.7881 962.042 201.8799 960.4375 210.8691 c
957.9668 224.71 945.0928 232.5068 936.3428 242.2783 c
924.4814 255.5254 915.5283 268.2432 898.6055 275.3662 c
887.3145 280.1191 876.2461 287.0459 864.2959 289.8369 c
836.2227 296.3926 809.498 290.2988 783.2451 280.1445 c
774.791 276.874 765.1543 274.6191 757.8652 269.3564 c
746.8271 261.3867 739.9951 246.7041 730.3672 237.0605 c
717.5078 224.1807 710.6436 215.6602 709.0889 196.4365 c
708.3301 187.0723 710.9639 179.9629 707.1787 171.1162 c
700.5273 155.5723 701.5498 141.084 706.6055 124.708 c
715.0693 97.2949 728.0713 68.4863 753.5508 53.0156 c
780.418 36.7031 821.3066 26.0918 852.5723 26.9551 c
874.7939 27.5674 889.8926 40.7451 908.0625 51.4805 c
929.5762 64.1904 951.7695 75.2822 958.041 101.9717 c
962.2051 119.6973 966.9854 134.7246 967.3379 153.124 c
967.3809 155.4043 967.498 157.6699 967.6406 159.9268 c
f
0.332555 0.661738 0.878141 0.255344 k
963.6436 164.3711 m
964.1553 172.4932 964.9893 180.5049 963.8057 188.7773 c
962.5059 197.8906 958.1025 205.9014 956.5146 214.7998 c
954.0693 228.5 941.3252 236.2188 932.6621 245.8916 c
920.9199 259.0059 912.0566 271.5938 895.3066 278.6455 c
884.1279 283.3506 873.1719 290.2061 861.3428 292.9688 c
833.5527 299.4609 807.0967 293.4287 781.1104 283.375 c
772.7412 280.1406 763.2021 277.9053 755.9873 272.6963 c
750.208 268.5225 746.3232 263.3613 742.1338 257.96 c
737.9854 252.6074 732.9063 249.207 727.9834 244.6094 c
721.1719 238.2441 713.6641 231.1621 709.4717 222.7236 c
702.5205 208.7285 704.334 193.5195 702.7822 178.5986 c
701.0313 161.7324 700.1582 145.9805 705.2441 129.5068 c
711.8516 108.0967 723.751 81.3613 743.6758 69.3662 c
760.1758 59.4326 780.8652 57.125 798.5771 49.7578 c
817.2217 42.002 834.5977 31.8682 855.4756 36.5352 c
875.0703 40.915 893.9453 53.0391 912.3662 60.9229 c
943.5635 74.2773 947.3125 104.6563 960.3096 132.7314 c
963.9668 140.6299 963.1855 149.3193 963.3428 157.6367 c
963.3867 159.8945 963.5029 162.1377 963.6436 164.3711 c
f
0 Ap
0.259678 0.614282 0.880491 0.112215 k
752.7969 263.2344 m
762.8291 272.6201 773.332 279.8682 788.96 283.0186 c
798.2666 284.8955 807.7891 283.9346 817.1797 284.9209 c
825.917 285.8398 834.2334 288.8408 843.1445 289.5723 c
863.5303 291.2441 883.7734 277.8779 900.7695 268.2295 c
916.4229 259.3418 925.3457 242.7568 939.2969 231.8037 c
954.043 220.2256 957.2861 204.6895 959.9619 186.7432 c
961.8623 174 956.8877 158.6631 953.6553 146.3574 c
950.6104 134.7627 945.3496 123.7236 934.2705 117.8945 c
921.4307 111.1387 912.0771 103.3594 902.8135 92.0039 c
889.8877 76.1563 877.9268 56.9385 859.6826 46.623 c
831.6299 30.7617 814.499 59.249 790.5625 68.2539 c
771.9717 75.2461 749.332 74.7412 732.7725 86.5947 c
713.334 100.5059 708.8652 129.6953 705.8643 152.0869 c
704.1211 165.1045 707.4268 176.7275 709.5352 189.418 c
711.4473 200.9453 709.4043 214.0938 714.3584 224.916 c
719.3018 235.7119 730.7227 240.7734 738.6582 248.9707 c
743.5801 254.0557 748.1377 258.875 752.7969 263.2344 c
f
0.222843 0.581903 0.805203 0.06424 k
784.5156 277.9326 m
792.2344 280.1855 800.4072 280.7041 808.4482 279.0029 c
822.292 276.0752 833.2988 278.209 846.8896 281.5566 c
866.9463 286.499 884.4482 273.4229 895.6904 257.6475 c
916.2119 228.8604 955.3496 222.5283 948.5781 178.751 c
947.0801 169.0557 948.7139 154.1387 942.5078 146.0508 c
933.4961 134.3066 914.8408 141.7979 905.416 130.6455 c
901.4102 125.9023 903.0547 117.4463 900.2842 111.5361 c
896.2041 102.8408 891.1689 100.1836 881.5791 98.5488 c
866.3213 95.9453 854.334 95.5352 841.0654 86.9336 c
818.7275 72.4512 795.3506 68.8203 771.4023 79.4092 c
764.8438 82.3096 763.4648 85.5781 758.8271 89.8789 c
754.8906 93.5322 748.7949 95.1172 743.751 96.7344 c
701.0996 110.4121 710.9902 165.2773 718.0518 198.0566 c
720.0918 207.5254 717.1738 217.7217 720.1318 226.9121 c
723.6504 237.8301 733.4639 240.7734 742.8457 245.1611 c
751.1602 249.0488 758.2334 255.6777 763.4922 263.1563 c
769.0225 271.0225 774.7607 275.0879 784.5156 277.9326 c
f
0.176303 0.543633 0.764004 0.022583 k
910.3271 229.9346 m
903.4893 237.834 899.002 246.8672 893.3711 255.5723 c
879.0625 277.6914 859.5967 281.5879 835.3711 274.959 c
821.9805 271.2949 811.2363 273.04 797.833 273.3916 c
773.7539 274.0225 760.6094 248.542 741.1885 238.5459 c
719.4209 227.3418 731.7646 199.5889 729.5313 179.0459 c
727.1768 157.3867 715.3174 111.4551 747.4443 103.7998 c
760.5117 100.6875 770.9883 113.043 783.0107 115.6699 c
800.5596 119.5059 816.3125 106.0518 831.8174 100.2324 c
870.6348 85.6621 884.21 130.3447 905.6904 152.251 c
913.4424 160.1572 927.5986 159.498 934.5039 167.3916 c
939.2002 172.7588 939.249 183.4492 938.5195 190.0146 c
937.5586 198.6553 932.8281 204.1123 926.8955 209.9443 c
920.5078 216.2236 916.1279 223.2344 910.3271 229.9346 c
f
0.222843 0.581903 0.805203 0.06424 k
731.6396 148.2744 m
727.4414 144.9229 730.6592 138.3555 735.873 139.9688 c
741.9248 141.8418 738.5293 153.7607 731.6396 148.2744 c
f
880.8428 132.9229 m
878.3447 130.9307 880.2588 127.0244 883.3604 127.9854 c
886.957 129.0996 884.9385 136.1865 880.8428 132.9229 c
f
813.3154 268.8096 m
810.8184 266.8164 812.7334 262.9121 815.833 263.8721 c
819.4316 264.9863 817.4131 272.0723 813.3154 268.8096 c
f
879.5518 237.7686 m
875.0664 234.1875 878.5039 227.1709 884.0762 228.8955 c
890.542 230.8965 886.9121 243.6279 879.5518 237.7686 c
f
0.259678 0.614282 0.880491 0.112215 k
925.7451 155.7012 m
922.7549 155.4453 922.0166 151.0293 924.876 149.9248 c
929.0605 148.3096 931.3975 156.1846 925.7451 155.7012 c
f
0.332555 0.661738 0.878141 0.255344 k
883.916 83.502 m
879.9307 83.1621 878.9463 77.2764 882.7578 75.8047 c
888.335 73.6514 891.4492 84.1455 883.916 83.502 c
f
0.36817 0.755611 1 0.450599 k
932.5664 94.335 m
928.3418 93.9395 926.3262 88.5459 930.6221 86.6641 c
936.6279 84.0352 941.2266 95.1445 932.5664 94.335 c
f
0.259678 0.614282 0.880491 0.112215 k
804.2344 82.2607 m
807.3496 89.0732 796.084 89.0332 791.6563 89.8291 c
771.333 93.4814 796.6064 65.5781 804.2344 82.2607 c
f
0.072755 0.38764 0.658961 0.000031 k
751.0771 239.0625 m
745.4668 238.877 741.2656 232.2266 747.7676 229.4111 c
755.6328 226 761.7285 239.4141 751.0771 239.0625 c
f
0.176303 0.543633 0.764004 0.022583 k
780.7998 112.4258 m
775.1885 112.2402 770.9873 105.5898 777.4893 102.7725 c
785.3555 99.3633 791.4502 112.7773 780.7998 112.4258 c
f
0.072755 0.38764 0.658961 0.000031 k
759.8896 247.4639 m
757.2539 247.377 755.2803 244.2549 758.334 242.9297 c
762.0303 241.3291 764.8936 247.6299 759.8896 247.4639 c
f
0.222843 0.581903 0.805203 0.06424 k
884.3398 255.9502 m
883.0918 270.501 859.665 268.0215 852.1631 261.6455 c
843.252 254.0742 841.6377 236.835 848.6729 227.5508 c
856.1602 217.6738 862.8945 227.9219 867.7451 234.2324 c
872.3242 240.1943 885.0596 247.5752 884.3398 255.9502 c
f
U
u
0.332555 0.661738 0.878141 0.255344 k
735.9268 189.2197 m
729.126 183.3711 722.0723 177.7715 714.375 176.3389 c
703.6992 174.3545 706.6436 181.4844 711.3555 187.1436 c
717.7939 194.8701 729.0352 198.1631 737.4082 203.4268 c
758.7627 216.8477 782.0674 228.1406 805.0449 238.54 c
820.3213 245.457 835.6309 253.7686 849.375 263.4121 c
857.7549 269.2891 873.1133 284.7988 884.6396 279.0107 c
898.957 271.8203 861.2363 254.2871 855.5752 251.3213 c
840.5068 243.4209 824.7891 236.8799 809.6602 229.1182 c
790.4912 219.2822 769.4658 212.3193 751.0039 201.1758 c
746.0146 198.165 741.0449 193.6211 735.9268 189.2197 c
f
756.7891 143.0732 m
745.2559 132.4307 731.6855 116.4199 716.9697 118.6563 c
703.2686 120.7451 716.0068 130.3711 721.4785 133.6416 c
734.0293 141.1396 746.8389 148.3564 759.2139 156.1348 c
780.5684 169.5557 803.874 180.8486 826.8516 191.25 c
849.4658 201.4873 869.958 215.2178 890.9268 228.3916 c
899.4121 233.7236 908.7969 243.5352 918.6055 246.3213 c
925.4189 248.2578 931.9375 247.75 930.7256 239.4189 c
928.9502 227.3701 892.249 212.0566 882.2793 206.6279 c
865.6953 197.5977 848.2412 190.4355 831.4658 181.8262 c
809.4297 170.5186 783.9258 162.9814 763.5674 148.7031 c
761.3975 147.1807 759.1348 145.2383 756.7891 143.0732 c
f
785.752 100.7441 m
776.5049 96.5615 767.3584 92.0742 760.1299 86.083 c
754.9268 81.7705 749.3896 72.542 741.7275 72.7324 c
734.5381 72.9092 731.5166 77.8994 734.1836 84.6621 c
740.1436 99.7715 775.8574 106.2148 788.7412 113.2393 c
811.1807 125.4678 834.0459 137.1299 857.4385 147.7217 c
878.4199 157.2188 898.5986 169.3555 917.0488 183.083 c
925.791 189.585 939.8613 203.9072 952.0225 201.0791 c
971.1006 196.6426 929.7666 172.7686 924.5977 169.6045 c
904.6387 157.3838 882.8496 148.8652 862.0947 138.2148 c
843.5723 128.7109 824.6436 120.0039 806.2305 110.2813 c
799.8799 106.9277 792.7881 103.9238 785.752 100.7441 c
f
0.36817 0.755611 1 0.450599 k
819.917 53.8721 m
818.8809 53.0283 817.833 52.1484 816.7676 51.2256 c
811.1895 46.3994 800.1689 34.2959 791.668 38.5029 c
775.251 46.6357 818.1094 64.6338 822.2275 67.2217 c
843.7627 80.7588 867.2686 92.1455 890.4395 102.6367 c
905.3477 109.3857 919.4014 117.7266 933.2051 126.4717 c
936.6885 128.6787 965.1309 148.1592 960.5205 129.4707 c
958.5996 121.6934 938.748 115.0117 931.7988 110.71 c
920.3467 103.6211 907.0781 99.2822 895.0947 93.1328 c
878.7305 84.7354 861.6045 77.9541 845.1611 69.7246 c
835.3281 64.8057 827.9688 60.4346 819.917 53.8721 c
f
0.056519 0.152071 0.393683 0.000031 k
735.0381 190.9941 m
728.2402 185.1455 721.1836 179.5459 713.4883 178.1143 c
702.8125 176.1289 705.7559 183.2598 710.4697 188.917 c
716.9072 196.6426 728.1484 199.9385 736.5205 205.2002 c
757.875 218.6221 781.1807 229.9141 804.1572 240.3154 c
819.4336 247.2305 834.7432 255.543 848.4883 265.1855 c
856.8672 271.0645 872.2246 286.5732 883.751 280.7842 c
898.0693 273.5947 860.3486 256.0615 854.6885 253.0938 c
839.6182 245.1973 823.9014 238.6543 808.7734 230.8936 c
789.6035 221.0566 768.5781 214.0947 750.1172 202.9512 c
745.1289 199.9404 740.1563 195.3965 735.0381 190.9941 c
f
0.027375 0.086183 0.242741 0.000031 k
734.1523 191.8818 m
727.3516 186.0322 720.2969 180.4326 712.6016 179.002 c
701.9238 177.0156 704.8691 184.1465 709.583 189.8057 c
716.0195 197.5322 727.2607 200.8262 735.6338 206.0889 c
756.9883 219.5088 780.291 230.8018 803.2705 241.2021 c
818.5479 248.1191 833.8555 256.4297 847.6016 266.0732 c
855.9795 271.9531 871.3379 287.4609 882.8643 281.6719 c
897.1807 274.4824 859.4609 256.9492 853.7998 253.9824 c
838.7314 246.083 823.0137 239.542 807.8867 231.7803 c
788.7178 221.9443 767.6904 214.9814 749.2295 203.8389 c
744.2412 200.8271 739.2695 196.2842 734.1523 191.8818 c
f
0.056519 0.152071 0.393683 0.000031 k
755.9014 144.8486 m
744.3672 134.2051 730.7988 118.1943 716.083 120.4297 c
702.3809 122.5205 715.1201 132.1445 720.5908 135.416 c
733.1426 142.915 745.9521 150.1318 758.3262 157.9102 c
779.6807 171.332 802.9863 182.624 825.9648 193.0244 c
848.5781 203.2627 869.0693 216.9941 890.04 230.167 c
898.5244 235.4971 907.9092 245.3105 917.7188 248.0967 c
924.5313 250.0313 931.0498 249.5234 929.8379 241.1934 c
928.0635 229.1445 891.3623 213.8311 881.3916 208.4004 c
864.8076 199.3721 847.3555 192.21 830.5781 183.6016 c
808.543 172.2949 783.0391 164.7559 762.6816 150.4775 c
760.5107 148.9561 758.248 147.0117 755.9014 144.8486 c
f
0.027375 0.086183 0.242741 0.000031 k
754.127 146.623 m
742.5938 135.9785 729.0244 119.9697 714.3242 122.2021 c
699.7793 124.4102 716.6641 135.3281 721.4561 138.6396 c
732.7207 146.4297 744.9863 152.416 756.5508 159.6846 c
777.9072 173.1064 801.2129 184.3975 824.1895 194.8008 c
846.8018 205.0361 867.2949 218.7686 888.2646 231.9404 c
896.751 237.2725 906.1533 245.8213 915.9619 248.6074 c
922.7754 250.543 929.2754 251.2998 928.0635 242.9678 c
926.2891 230.9199 889.5879 215.6074 879.6172 210.1758 c
863.0342 201.1465 845.5801 193.9834 828.8027 185.376 c
806.7686 174.0703 781.2637 166.5313 760.9053 152.2529 c
758.7354 150.7305 756.4727 148.7871 754.127 146.623 c
f
0.056519 0.152071 0.393683 0.000031 k
784.8633 102.5186 m
775.6172 98.3379 766.4697 93.8496 759.2422 87.8584 c
754.04 83.5459 748.502 74.3174 740.8408 74.5059 c
733.6494 74.6836 730.6289 79.6748 733.2959 86.4385 c
739.2549 101.5449 774.9688 107.9893 787.8545 115.0127 c
810.293 127.2432 833.1582 138.9043 856.5527 149.4971 c
877.5313 158.9941 897.7109 171.1289 916.1621 184.8574 c
924.9043 191.3604 938.9717 205.6826 951.1338 202.8535 c
970.2119 198.417 928.8809 174.543 923.71 171.3799 c
903.75 159.1582 881.9629 150.6416 861.207 139.9893 c
842.6826 130.4854 823.7568 121.7793 805.3438 112.0557 c
798.9932 108.7031 791.8994 105.6992 784.8633 102.5186 c
f
0.027375 0.086183 0.242741 0.000031 k
783.6182 104.6172 m
774.4521 100.4727 765.3867 96.0244 758.2207 90.085 c
753.0625 85.8086 747.5752 76.6602 739.9795 76.8477 c
732.8516 77.0264 729.8564 81.9736 732.502 88.6768 c
738.4092 103.6514 773.8115 110.04 786.583 117.002 c
808.8262 129.125 831.4912 140.6865 854.6816 151.1846 c
875.4775 160.5986 895.4805 172.6279 913.7695 186.2373 c
922.4346 192.6836 937.3252 208.4336 949.3389 205.4551 c
972.9688 199.5957 926.377 176.0137 921.2529 172.876 c
901.4668 160.7617 879.8701 152.3184 859.2959 141.7617 c
840.9346 132.3398 822.1719 123.709 803.9209 114.0703 c
797.624 110.7471 790.5928 107.7695 783.6182 104.6172 c
f
0.056519 0.152071 0.393683 0.000031 k
819.0283 55.6475 m
817.9932 54.8037 816.9453 53.9238 815.8809 53.001 c
810.3027 48.1748 799.2813 36.0713 790.7813 40.2783 c
774.3633 48.4111 817.2227 66.4082 821.3398 68.9971 c
842.875 82.5342 866.3799 93.9199 889.5527 104.4111 c
904.4609 111.1611 918.5137 119.501 932.3184 128.2461 c
935.8018 130.4521 964.2451 149.9346 959.6338 131.2441 c
957.7129 123.4668 937.8604 116.7861 930.9111 112.4854 c
919.46 105.3945 906.1914 101.0566 894.207 94.9082 c
877.8438 86.5107 860.7178 79.7275 844.2734 71.501 c
834.4395 66.5811 827.0811 62.207 819.0283 55.6475 c
f
0.027375 0.086183 0.242741 0.000031 k
818.6045 56.8213 m
817.5781 55.9854 816.5391 55.1113 815.4834 54.1973 c
809.9531 49.4121 799.0244 37.4111 790.5977 41.582 c
774.3193 49.6465 816.8145 67.4912 820.8965 70.0576 c
842.249 83.4785 865.5547 94.7676 888.5293 105.1709 c
903.3105 111.8623 917.2441 120.1318 930.9326 128.8018 c
934.3848 130.9902 962.5869 150.3066 958.0146 131.7764 c
956.1113 124.0645 936.4258 117.4404 929.5361 113.1748 c
918.1816 106.1465 905.0254 101.8438 893.1455 95.748 c
876.9199 87.4229 859.9404 80.6973 843.6357 72.5391 c
833.8857 67.6611 826.5879 63.3262 818.6045 56.8213 c
f
0.001099 0.037751 0.130495 0.000031 k
845.4111 260.0215 m
854.9355 265.2871 865.502 275.2852 876.6338 276.416 C
875.5273 261.9463 847.6104 255.6777 836.7236 251.0059 c
822.5498 244.9238 808.5498 238.8877 794.8848 231.7354 c
771.251 219.3682 743.8877 209.2783 725.4824 189.584 c
722.5645 186.46 715.9844 178.5029 710.6387 181.6221 c
701.8281 186.7627 728.124 199.5342 730.4287 201.0742 c
741.0918 208.2061 753.0029 211.9004 763.6465 218.6924 c
775.9365 226.5371 790.0898 233.0674 803.4863 238.8047 c
817.7979 244.9355 831.7061 252.4434 845.4111 260.0215 c
f
854.459 202.9258 m
845.7354 198.6943 837.4531 193.5537 828.6738 189.459 c
821.6523 186.1846 813.8984 184.29 806.9551 180.8672 c
799.6143 177.25 792.7666 172.748 785.458 169.1221 c
777.5732 165.208 769.2588 162.084 762.2783 156.6543 c
753.8564 150.1055 744.0664 145.5791 735.666 139.043 c
730.5566 135.0684 725.2129 129.9492 719.1055 127.5684 c
716.2471 126.4561 713.2402 124.9092 713.3789 128.8184 c
713.543 133.4219 722.9023 136.9326 725.915 138.9434 c
734.4746 144.666 743.4775 149.4668 752.2402 154.8457 c
765.1885 162.791 778.4229 169.8379 792.166 176.248 c
813.0801 186.0039 834.7695 195.2119 855.1484 206.0371 c
870.3027 214.0869 883.4756 223.9756 897.2715 233.9258 c
899.7461 235.71 922.2881 252.5654 923.2598 243.6465 c
924.3135 234.0049 900.2207 222.6826 893.875 219.5752 c
881.0479 213.293 867.3125 209.1592 854.459 202.9258 c
f
794.791 113.7988 m
781.2021 107.3633 767.3926 101.4219 754.0059 94.5898 c
749.3291 92.2031 737.9072 75.708 735.5879 87.3271 c
733.4697 97.9453 751.3945 102.4766 758.6611 104.8604 c
766.0908 107.2969 772.9072 111.1143 780.1855 113.9375 c
788.7432 117.2578 797.7705 119.0039 806.0713 123.0098 c
821.8926 130.6475 837.0771 139.5713 852.9209 147.2432 c
869.3213 155.1865 885.7119 163.3779 900.6426 173.9004 c
905.7266 177.4824 938.0732 206.3301 944.1152 201.2578 c
949.417 196.8076 885.9609 160.2666 881.0381 157.6445 c
852.6084 142.5059 823.9033 127.5879 794.791 113.7988 c
f
863.3125 86.127 m
888.4063 99.7549 916.1377 108.7803 940.5645 123.4902 c
942.6348 124.7373 954.6104 131.3135 950.9375 133.9961 c
946.7266 137.0703 928.8691 125.8115 925.3945 123.957 c
902.7861 111.8994 881.7559 97.9922 858.3184 87.415 c
842.6309 80.3379 828.083 70.8291 812.2773 63.998 c
805.8535 61.2207 797.5742 56.8496 793.1182 51.3486 c
791.0596 48.8066 789.0098 45.7021 793.2832 44.5439 c
798.6465 43.0938 802.3398 50.9727 804.8838 53.9219 c
808.8691 58.541 814.1406 58.8193 819.4922 61.6182 c
834.3252 69.374 848.6055 78.1416 863.3125 86.127 c
f
U
U
u
u
1 Ap
0.36817 0.755611 1 0.450599 k
299.2563 498.6328 m
299.3154 506.9697 299.3491 515.335 298.2119 523.2974 c
296.8975 532.5029 292.4487 540.5952 290.8447 549.585 c
288.374 563.4253 275.4995 571.2231 266.7505 580.9927 c
254.8867 594.2402 245.9346 606.958 229.0132 614.0811 c
217.7217 618.8345 206.6528 625.7588 194.7031 628.5508 c
166.6294 635.1074 139.9043 629.0142 113.6533 618.8594 c
105.1992 615.5903 95.5605 613.3345 88.2739 608.0718 c
77.2349 600.1006 70.4014 585.4194 60.7754 575.7764 c
47.9155 562.8955 41.0508 554.3755 39.4951 535.1514 c
38.7373 525.7871 41.3716 518.6782 37.5859 509.8315 c
30.9336 494.2852 31.9565 479.7949 37.0117 463.4209 c
38.9712 457.0771 41.7183 450.9717 44.0269 444.7344 c
46.5679 437.8711 51.9849 434.3301 56.0068 428.7393 c
61.124 421.627 63.6865 413.9922 69.6001 407.2061 c
87.9575 386.1494 103.4175 373.5244 132.8999 373.3125 c
151.9814 373.1758 171.1489 369.2998 190.1602 369.7988 c
242.6357 371.1807 302.3701 427.9912 299.4629 481.7393 c
299.1636 487.2656 299.2158 492.9434 299.2563 498.6328 c
f
0.332555 0.661738 0.878141 0.255344 k
294.0498 503.0869 m
294.5615 511.208 295.396 519.2183 294.2139 527.4922 c
292.9131 536.6055 288.5093 544.6162 286.9209 553.5146 c
284.4756 567.2158 271.7314 574.9341 263.0698 584.606 c
251.3257 597.7197 242.4634 610.3091 225.7129 617.3604 c
214.5361 622.0659 203.5791 628.9204 191.7495 631.6836 c
163.9595 638.1753 137.5039 632.1436 111.5181 622.0913 c
103.1489 618.8545 93.6084 616.6201 86.395 611.4111 c
75.4673 603.52 68.7036 588.9873 59.1743 579.4419 c
46.4443 566.6909 39.6489 558.2578 38.1089 539.2266 c
37.3584 529.957 39.9653 522.9194 36.2188 514.1636 c
29.6333 498.7744 30.646 484.4316 35.6509 468.2207 c
37.5898 461.9404 40.3091 455.8975 42.5942 449.7236 c
46.3511 439.5752 55.5688 435.5547 60.2056 424.9219 c
70.2988 401.7744 99.0996 385.5557 123.8203 382.8154 c
143.5161 380.6309 163.2637 385.9453 183.0166 385.416 c
201.5532 384.918 220.3691 379.7656 236.9272 390.5713 c
250.0933 399.1631 267.0586 411.9609 276.9502 424.1445 c
294.9238 446.2842 292.3911 476.7275 294.0498 503.0869 c
f
0 Ap
0.259678 0.614282 0.880491 0.112215 k
83.7896 601.1226 m
93.9316 610.5249 105.1099 618.1489 115.5259 620.8032 c
126.728 623.6563 137.2271 624.7061 148.6719 625.0674 c
157.1162 625.334 165.1826 627.5996 173.5493 628.2866 c
189.7261 629.6143 205.9912 620.6934 219.7041 613.0273 c
230.8135 606.8164 236.4287 598.9365 243.8794 589.0327 c
253.459 576.3008 270.1729 571.3477 279.5078 559.0229 c
292.3867 542.0176 278.9946 524.6235 285.7324 506.4575 c
292.9399 487.0254 285.0361 481.0469 274.8481 465.5059 c
261.6362 445.3564 246.064 419.7705 222.1167 410.9912 c
206.8721 405.4033 192.6626 405.3193 178.0898 397.3174 c
166.7813 391.1094 154.5264 385.6553 141.7456 389.4277 c
129.8301 392.9453 122.7383 402.335 112.084 407.9473 c
99.6616 414.4922 84.0293 409.251 74.5171 421.8027 c
67.3779 431.2207 69.1289 444.9834 64.7026 455.5283 c
58.8257 469.5264 43.229 473.042 38.2866 487.6328 c
35.314 496.4072 38.4155 502.0415 39.6509 510.6646 c
42.2666 528.9141 40.2583 545.7549 50.1963 562.1616 c
59.0063 576.71 71.3188 589.5601 83.7896 601.1226 c
f
0.222843 0.581903 0.805203 0.06424 k
114.9678 615.6064 m
122.4893 617.9868 129.0864 614.7744 136.5 614.2334 c
153.373 613 169.6479 621.9204 186.7192 620.6826 c
203.9971 619.4297 216.3037 609.2163 226.0972 595.4756 c
246.6191 566.687 285.7568 560.3564 278.9863 516.5796 c
277.4863 506.8843 279.1226 491.9668 272.915 483.8789 c
263.9009 472.1328 247.6777 460.5918 235.0713 453.0674 c
224.6807 446.8652 212.5303 445.3359 202.1489 439.5137 c
187.1138 431.0801 182.8682 411.2441 167.7944 403.5078 c
153.5874 396.2168 136.9761 405.9756 125.5347 414.4609 c
116.418 421.2236 111.1318 423.0146 99.9966 425.0059 c
77.5786 429.0156 84.3579 443.3477 72.3931 456.8789 c
66.9438 463.0449 58.5518 466.3574 54.4058 473.7119 c
48.1138 484.874 49.9863 498.7764 50.8545 510.9702 c
51.75 523.5225 50.1484 535.5479 50.5039 547.9331 c
50.9136 562.1768 71.1055 574.6665 83.585 578.3384 c
107.667 585.4233 95.229 609.3584 114.9678 615.6064 c
f
0.176303 0.543633 0.764004 0.022583 k
221.1782 460.8652 m
223.6831 461.001 226.1714 461.3477 228.6382 461.9922 c
245.4043 466.3721 258.2021 486.7773 266.0566 501.0083 c
280.9136 527.9292 258.4009 549.5239 241.8442 568.6494 c
235.0059 576.5488 230.5181 585.583 224.8872 594.2871 c
210.5786 616.4072 191.1128 620.3037 166.8867 613.6748 c
156.9829 610.9653 148.0332 609.4937 137.7754 610.9385 c
131.1279 611.8745 122.1133 615.5679 116.1743 610.8579 c
109.9106 605.8896 107.9219 594.2422 103.6162 587.4917 c
98.1016 578.8462 90.9526 571.7188 82.084 566.5195 c
69.7178 559.2725 59.6499 553.665 55.7285 538.8252 c
49.2524 514.3213 66.9746 493.4863 75.6621 471.9521 c
85.4048 447.8008 102.2979 426.9541 131.832 437.5518 c
148.9775 443.7012 161.4473 458.4912 179.6636 462.5186 c
193.4565 465.5664 207.5557 460.126 221.1782 460.8652 c
f
0.222843 0.581903 0.805203 0.06424 k
211.3276 583.2705 m
212.3262 583.998 213.3545 584.5098 214.3853 584.748 c
223.5728 586.8745 232.8623 576.603 229.3906 568.1855 c
227.5459 563.7139 212.4097 553.9595 207.2017 555.8936 c
197.8164 559.3799 203.6455 577.6733 211.3276 583.2705 c
f
78.3145 513.2515 m
74.1172 509.8989 77.335 503.332 82.5483 504.9463 c
88.6006 506.8193 85.2051 518.7368 78.3145 513.2515 c
f
231.2065 502.9922 m
228.7095 500.9985 230.6235 497.0928 233.7241 498.0537 c
237.3223 499.168 235.3032 506.2539 231.2065 502.9922 c
f
143.7222 607.5254 m
141.2256 605.5317 143.1396 601.6265 146.2407 602.5874 c
149.8384 603.7007 147.8193 610.7871 143.7222 607.5254 c
f
0.259678 0.614282 0.880491 0.112215 k
176.4336 601.6719 m
172.4473 601.3306 171.4634 595.4458 175.2749 593.9736 c
180.8501 591.8218 183.9653 602.3154 176.4336 601.6719 c
f
102.0298 480.5918 m
99.0386 480.3359 98.3003 475.9199 101.1602 474.8154 c
105.3438 473.1992 107.6816 481.0742 102.0298 480.5918 c
f
186.6455 453.5342 m
183.6538 453.2803 182.915 448.8643 185.7749 447.7588 c
189.958 446.1436 192.2969 454.0186 186.6455 453.5342 c
f
240.6582 533.3159 m
236.6729 532.9766 235.6885 527.0898 239.4995 525.6191 c
245.0757 523.4658 248.1895 533.9604 240.6582 533.3159 c
f
0.332555 0.661738 0.878141 0.255344 k
202.1299 418.084 m
197.9043 417.6895 195.8896 412.2959 200.1836 410.4141 c
206.1914 407.7832 210.7886 418.8926 202.1299 418.084 c
f
0.222843 0.581903 0.805203 0.06424 k
163.0342 463.4316 m
161.1309 463.1201 159.3926 463.2559 158.1323 464.0527 c
150.6758 468.7705 160.188 485.2061 167.7676 484.6348 c
172.5576 484.2734 177.9902 475.418 175.8047 471.2314 c
174.2031 468.1631 168.0459 464.25 163.0342 463.4316 c
f
0.176303 0.543633 0.764004 0.022583 k
86.021 595.3096 m
81.8525 595.1729 78.73 590.2319 83.5615 588.1382 c
89.4072 585.6045 93.936 595.5718 86.021 595.3096 c
f
78.71 584.5073 m
76.7354 584.4414 75.2549 582.1006 77.5449 581.1089 c
80.3159 579.9077 82.4619 584.6313 78.71 584.5073 c
f
0.072755 0.38764 0.658961 0.000031 k
112.0801 458.0703 m
106.4702 457.8848 102.2695 451.2373 108.771 448.418 c
116.6382 445.0098 122.7319 458.4219 112.0801 458.0703 c
f
U
u
0.259678 0.614282 0.880491 0.112215 k
184.3843 574.6167 m
191.3306 559.9346 170.1694 547.9639 156.9673 542.3047 C
147.458 550.9434 131.9717 572.0234 142.9204 581.1333 c
149.8936 586.9346 158.6074 582.9233 162.5518 575.2354 C
169.2354 583.021 179.9355 584.022 184.3843 574.6167 c
f
0.067933 0.994903 0.989685 0.16 k
182.6094 578.1665 m
189.5562 563.4834 168.3955 551.5137 155.1919 545.854 C
145.6836 554.4922 130.1968 575.5732 141.146 584.6826 c
148.1182 590.4839 156.8325 586.4731 160.7778 578.7847 C
167.4609 586.5703 178.1616 587.5713 182.6094 578.1665 c
f
0.001831 0.917481 0.826819 0.004271 k
182.6094 579.9409 m
189.5562 565.2578 168.3955 553.2881 155.1919 547.6284 C
145.6836 556.2676 130.1968 577.3477 141.146 586.458 c
148.1182 592.2583 156.8325 588.2471 160.7778 580.5596 C
167.4609 588.3457 178.1616 589.3457 182.6094 579.9409 c
f
0.259678 0.614282 0.880491 0.112215 k
139.2573 449.6387 m
154.2393 449.5283 155.7104 427.1514 155.124 413.915 C
144.1377 409.4727 120.4199 405.0498 117.2354 417.7959 c
115.2085 425.9131 122.0317 431.5469 129.9995 431.7451 C
126.2065 440.417 129.6611 449.71 139.2573 449.6387 c
f
/BBAccumRotation (1.121623) XT
0.332555 0.661738 0.878141 0.255344 k
145.5762 446.5283 m
158.4131 444.7139 157.104 425.3516 155.0801 414.0664 C
145.147 411.5205 124.2954 410.4521 123.0293 421.75 c
122.2236 428.9463 128.7236 432.9922 135.5806 432.248 C
133.3232 440.1211 137.354 447.6943 145.5762 446.5283 c
f
/BBAccumRotation (0.988426) XT
0.067933 0.994903 0.989685 0.16 k
155.6167 456.1436 m
170.0566 448.7031 160.5229 426.3379 153.4761 413.8213 C
140.6758 414.9043 115.5664 422.2363 118.7266 436.125 c
120.7397 444.9678 130.0981 447.0771 137.9019 443.3682 C
138.4795 453.6133 146.3701 460.9092 155.6167 456.1436 c
f
/BBAccumRotation (0.653088) XT
0.001831 0.917481 0.826819 0.004271 k
157.3916 456.1436 m
171.8311 448.7031 162.2983 426.3379 155.251 413.8213 C
142.4497 414.9043 117.3413 422.2363 120.502 436.125 c
122.5146 444.9678 131.873 447.0771 139.6772 443.3682 C
140.2544 453.6133 148.1445 460.9092 157.3916 456.1436 c
f
/BBAccumRotation (0.653088) XT
0.259678 0.614282 0.880491 0.112215 k
278.3408 539.5859 m
285.6782 527.397 268.2871 515.1167 257.2783 509.0298 C
248.2363 515.7246 232.897 532.7368 241.6406 541.6338 c
247.208 547.2988 255.1528 544.5664 259.2617 538.2119 C
264.4043 545.5825 273.6411 547.3906 278.3408 539.5859 c
f
/BBAccumRotation (0.100108) XT
0.332555 0.661738 0.878141 0.255344 k
275.644 539.4702 m
281.9409 527.2236 264.3501 516.4888 253.3232 511.3232 C
245.0244 518.3745 231.3101 535.7983 240.3311 543.8257 c
246.0762 548.936 253.5718 545.7822 257.1289 539.3789 C
262.5718 546.1641 271.6108 547.313 275.644 539.4702 c
f
/BBAccumRotation (0.033160) XT
0.067933 0.994903 0.989685 0.16 k
273.9043 542.2476 m
281.2422 530.0591 263.8506 517.7783 252.8408 511.6914 C
252.5059 511.9404 251.0659 512.5791 y
228.7842 535.729 237.2036 544.2964 v
242.771 549.9609 250.7163 547.229 254.8252 540.8735 C
259.9678 548.2441 269.2046 550.0522 273.9043 542.2476 c
f
/BBAccumRotation (0.100108) XT
0.001831 0.917481 0.826819 0.004271 k
272.1284 543.1343 m
279.4668 530.9468 262.0762 518.6655 251.0659 512.5791 C
242.0259 519.2739 226.6855 536.2861 235.4287 545.1836 c
240.9966 550.8486 248.9414 548.1157 253.0508 541.7617 C
258.1924 549.1318 267.4297 550.9399 272.1284 543.1343 c
f
/BBAccumRotation (0.100108) XT
0.259678 0.614282 0.880491 0.112215 k
93.6196 528.2959 m
108.4678 521.708 100.2529 498.8262 93.9473 485.9199 C
81.104 486.2568 55.6108 492.1152 57.9575 506.1626 c
59.4521 515.1089 68.6714 517.7588 76.6792 514.5107 C
76.6592 524.7715 84.1113 532.5161 93.6196 528.2959 c
f
/BBAccumRotation (0.711328) XT
0.272068 1 1 0.303807 k
91.8457 531.8457 m
106.519 525.3345 93.9473 490.3564 y
92.2461 489.6211 92.1719 489.4697 V
79.3296 489.8057 53.8369 495.6641 56.1826 509.7129 c
57.6782 518.6577 66.8975 521.3091 74.9043 518.0601 C
74.8843 528.3208 82.3359 536.0654 91.8457 531.8457 c
f
/BBAccumRotation (0.711328) XT
0.067933 0.994903 0.989685 0.16 k
93.6196 532.7324 m
108.4678 526.145 100.2529 503.2637 93.9473 490.3564 C
81.104 490.6943 55.6108 496.5508 57.9575 510.5996 c
59.4521 519.5459 68.6714 522.1963 76.6792 518.9473 C
76.6592 529.209 84.1113 536.9531 93.6196 532.7324 c
f
/BBAccumRotation (0.711328) XT
0.222843 0.581903 0.805203 0.06424 k
200.0127 513.4634 m
203.1426 502.6704 187.3735 496.8203 177.7329 494.4063 C
172.1885 501.3516 163.9268 517.4521 172.4072 522.4717 c
177.8076 525.667 183.3179 521.9688 185.1675 516.2852 C
190.5879 520.8672 198.0073 520.3755 200.0127 513.4634 c
f
0.332555 0.661738 0.878141 0.255344 k
198.4731 515.3672 m
201.1006 504.4424 185.0771 499.3276 175.3364 497.3623 C
170.1187 504.5562 162.6108 521.022 171.3135 525.644 c
176.8564 528.5854 182.1899 524.6372 183.7744 518.874 C
189.4004 523.2002 196.79 522.3652 198.4731 515.3672 c
f
0.272068 1 1 0.303807 k
197.2031 516.312 m
200.333 505.52 184.5645 499.6699 174.9238 497.2559 C
174.7583 497.4639 174.0361 498.1436 y
161.3711 520.4517 169.5981 525.3213 v
174.998 528.5161 180.5093 524.8179 182.3584 519.1348 C
187.7788 523.7173 195.1982 523.2246 197.2031 516.312 c
f
0.067933 0.994903 0.989685 0.16 k
196.3159 517.1997 m
199.4458 506.4072 183.6772 500.5571 174.0361 498.1436 C
168.4922 505.0889 160.2305 521.1885 168.7104 526.2085 c
174.1113 529.4038 179.6211 525.7061 181.4702 520.0215 C
186.8911 524.604 194.311 524.1118 196.3159 517.1997 c
f
0.332555 0.661738 0.878141 0.255344 k
265.4653 467.71 m
265.6099 454.9082 246.5161 453.2959 235.1973 453.5859 C
231.2295 462.9023 227.0718 483.0947 237.9106 486.0156 c
244.8145 487.8779 249.7354 482.1387 250.0317 475.335 C
257.3789 478.7119 265.3726 475.9092 265.4653 467.71 c
f
0.272068 1 1 0.303807 k
263.4746 472.1455 m
264.958 459.4307 246.1387 455.8281 234.8521 454.9326 C
234.7495 455.1152 233.9644 455.8184 y
223.8999 483.5117 234.1563 487.4688 v
240.8257 490.041 246.3208 484.8496 247.3281 478.1133 C
254.2817 482.2402 262.5249 480.291 263.4746 472.1455 c
f
0.067933 0.994903 0.989685 0.16 k
262.5869 473.0332 m
264.0708 460.3184 245.2515 456.7168 233.9644 455.8184 C
229.0435 464.6699 222.7954 484.3154 233.2686 488.3555 c
239.939 490.9297 245.4336 485.7354 246.4409 479 C
253.395 483.1279 261.6372 481.1787 262.5869 473.0332 c
f
U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
